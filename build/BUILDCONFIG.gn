# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
if (target_os == "") {
  target_os = host_os
}
if (target_cpu == "") {
  target_cpu = host_cpu
}
if (current_cpu == "") {
  current_cpu = target_cpu
}
if (current_os == "") {
  current_os = target_os
}

build_with_separate_cobalt_toolchain = false
import("//starboard/build/platform_path.gni")
host_toolchain = "//starboard/build/toolchain/$host_os:$host_cpu"
cobalt_toolchain = "//$starboard_path/toolchain:cobalt"
starboard_toolchain = "//$starboard_path/toolchain:starboard"
import("//$starboard_path/platform_configuration/configuration.gni")

# All binary targets will get this list of configs by default.
_shared_binary_target_configs = [
    "//starboard/build/config/sabi",
    "//build/config/compiler:compiler_defaults",
    "//build/config/compiler:default_include_dirs",
    "//build/config/sanitizers:default_sanitizer_flags",
    "//starboard/build/config:size",
    ]
_shared_binary_target_configs += [
  "//build/config/coverage:default_coverage",
  "//build/config/compiler:no_exceptions",
  "//starboard/build/config:base",
  "//starboard/build/config:host",
  "//starboard/build/config:target",
  "//starboard/build/config:warnings_as_errors",
  "//starboard/build/config:default_compiler_flags",
  "//starboard/build/config:starboard",
  "//$starboard_path/platform_configuration",
]
_shared_configs = [
    "//build/config/compiler:default_optimization",
    "//build/config/compiler:chromium_code",
]
# Apply that default list to the binary target types.
set_defaults("executable") {
  configs = _shared_configs + _shared_binary_target_configs
}
set_defaults("static_library") {
  configs = _shared_configs + _shared_binary_target_configs
}
set_defaults("shared_library") {
  configs = _shared_configs + _shared_binary_target_configs
}
set_defaults("source_set") {
  configs = _shared_configs + _shared_binary_target_configs
}
set_default_toolchain(cobalt_toolchain)
TESTONLY_AND_VISIBILITY = [
  "testonly",
  "visibility",
]
template("component") {
  not_needed(["target_name"])
  not_needed(invoker, ["deps" , "public_deps" , "defines" , "sources" , "output_name"] )
  target("static_library", target_name) {
    forward_variables_from(invoker, TESTONLY_AND_VISIBILITY)
    forward_variables_from(invoker, "*", TESTONLY_AND_VISIBILITY)
    configs += _shared_binary_target_configs
  }
}
set_defaults("component") {
  configs = _shared_configs
}
import("//starboard/build/config/os_definitions.gni")
is_robolectric = false
is_starboard = true

is_official_build = false
declare_args() {
  is_clang = true
}

is_component_build = false
use_cobalt_customizations = true
is_internal_build = false
sb_is_modular = false

is_devel = true
is_qa = false
is_gold = false
is_debug = false

is_starboardized_toolchain = true
sb_evergreen_compatible_use_libunwind = false
import("//build/variables.gni")
cobalt_fastbuild = false
declare_args() {
  use_asan = true
}
use_tsan = false
using_old_compiler = false
use_x11 = is_linux
is_chromecast = false
is_docker_build = false
is_host_win = false
default_compiler_configs = []
use_xcode_clang = false
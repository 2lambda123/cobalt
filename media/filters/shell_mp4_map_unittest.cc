/*
 * Copyright 2012 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "media/filters/shell_mp4_map.h"

#include <algorithm>  // for std::min
#include <set>

#include "lb_platform.h"
#include "media/base/shell_buffer_factory.h"
#include "media/base/mock_shell_data_source_reader.h"
#include "media/base/mock_shell_filter_graph_log.h"
#include "media/filters/shell_mp4_parser.h"
#include "testing/gmock/include/gmock/gmock.h"
#include "testing/gtest/include/gtest/gtest.h"

using ::testing::_;
using ::testing::AllOf;
using ::testing::AnyNumber;
using ::testing::DoAll;
using ::testing::Ge;
using ::testing::Invoke;
using ::testing::Lt;
using ::testing::Return;
using ::testing::SetArrayArgument;

namespace media {

static const uint8 kTestTable_stco[] = {
  0x00, 0x00, 0xae, 0xdc, 0x00, 0x00, 0xb8, 0x39, 0x00, 0x00,
  0xcc, 0x90, 0x00, 0x01, 0x42, 0xb5, 0x00, 0x01, 0x9d, 0x4b, 0x00, 0x02, 0x12,
  0x17, 0x00, 0x02, 0x7b, 0x67, 0x00, 0x02, 0xe9, 0xec, 0x00, 0x03, 0x4c, 0xc1,
  0x00, 0x03, 0xa7, 0xd5, 0x00, 0x04, 0x1f, 0x9a, 0x00, 0x04, 0x9f, 0x70, 0x00,
  0x05, 0x13, 0xeb, 0x00, 0x05, 0x9c, 0xf5, 0x00, 0x05, 0xe5, 0x3f, 0x00, 0x06,
  0x22, 0x18, 0x00, 0x06, 0xc5, 0xeb, 0x00, 0x07, 0x18, 0x37, 0x00, 0x07, 0x56,
  0x2c, 0x00, 0x07, 0xf5, 0x21, 0x00, 0x08, 0x39, 0xce, 0x00, 0x08, 0x82, 0xc6,
  0x00, 0x09, 0x0f, 0x59, 0x00, 0x09, 0x44, 0x9b, 0x00, 0x09, 0x74, 0x94, 0x00,
  0x0a, 0x06, 0x12, 0x00, 0x0a, 0x44, 0x36, 0x00, 0x0a, 0xb1, 0x1e, 0x00, 0x0b,
  0x21, 0x8d, 0x00, 0x0b, 0xa2, 0x9f, 0x00, 0x0b, 0xee, 0x6c, 0x00, 0x0c, 0x98,
  0xe2, 0x00, 0x0d, 0x1b, 0xcc, 0x00, 0x0d, 0xa5, 0xf9, 0x00, 0x0e, 0x79, 0xf3,
  0x00, 0x0e, 0xdc, 0x47, 0x00, 0x0f, 0x10, 0x27, 0x00, 0x0f, 0x40, 0x89, 0x00,
  0x0f, 0xcb, 0x10, 0x00, 0x10, 0x20, 0xe0, 0x00, 0x10, 0x92, 0xc4, 0x00, 0x10,
  0xfc, 0x94, 0x00, 0x11, 0x52, 0xc4, 0x00, 0x11, 0x94, 0xe2, 0x00, 0x11, 0xe4,
  0x3e, 0x00, 0x12, 0x36, 0xa2, 0x00, 0x12, 0xc5, 0x1d, 0x00, 0x13, 0x52, 0x6a,
  0x00, 0x13, 0x9f, 0x47, 0x00, 0x14, 0x4f, 0xa4, 0x00, 0x15, 0x01, 0x20, 0x00,
  0x15, 0x9c, 0xfc, 0x00, 0x16, 0x1e, 0xd4, 0x00, 0x16, 0xfe, 0x0e, 0x00, 0x17,
  0x8a, 0x6f, 0x00, 0x18, 0x65, 0xde, 0x00, 0x19, 0xfc, 0x8b, 0x00, 0x1b, 0x8b,
  0x4c, 0x00, 0x1d, 0x66, 0x3b, 0x00, 0x1e, 0x5f, 0x30, 0x00, 0x1f, 0x14, 0x4d,
  0x00, 0x1f, 0x48, 0x31, 0x00, 0x1f, 0xe3, 0xe5, 0x00, 0x21, 0x0e, 0xbf, 0x00,
  0x22, 0x0e, 0x8f, 0x00, 0x23, 0x14, 0x87, 0x00, 0x24, 0x26, 0x68, 0x00, 0x25,
  0x22, 0x37, 0x00, 0x26, 0x5a, 0x79, 0x00, 0x27, 0x2f, 0xaa, 0x00, 0x28, 0x0b,
  0x64, 0x00, 0x28, 0xc9, 0xbf, 0x00, 0x29, 0x72, 0xd5, 0x00, 0x29, 0xed, 0xd3,
  0x00, 0x2a, 0x70, 0xbd, 0x00, 0x2a, 0xe2, 0x2f, 0x00, 0x2b, 0xd5, 0xf7, 0x00,
  0x2c, 0xd3, 0xff, 0x00, 0x2d, 0x97, 0xfa, 0x00, 0x2e, 0x4e, 0xce, 0x00, 0x2e,
  0xe6, 0x5a, 0x00, 0x30, 0x06, 0x2d, 0x00, 0x30, 0xa2, 0x4f, 0x00, 0x31, 0x1b,
  0x0d, 0x00, 0x31, 0x8f, 0xc4, 0x00, 0x32, 0x3f, 0x63, 0x00, 0x32, 0xae, 0xc6,
  0x00, 0x33, 0x4b, 0x69, 0x00, 0x33, 0xf7, 0x09, 0x00, 0x34, 0xef, 0x54, 0x00,
  0x35, 0xcd, 0x1a, 0x00, 0x36, 0x9c, 0x7b, 0x00, 0x36, 0xef, 0xbf, 0x00, 0x37,
  0x66, 0x2e, 0x00, 0x37, 0xbc, 0xc6, 0x00, 0x38, 0x0e, 0xf4, 0x00, 0x38, 0x9e,
  0x19, 0x00, 0x39, 0x39, 0x5e, 0x00, 0x3a, 0x1e, 0x1f, 0x00, 0x3a, 0xd3, 0xb3,
  0x00, 0x3b, 0xd2, 0x4c, 0x00, 0x3c, 0x75, 0xcb, 0x00, 0x3d, 0x04, 0xa4, 0x00,
  0x3d, 0x39, 0xe5, 0x00, 0x3d, 0x6e, 0xc1, 0x00, 0x3d, 0x8a, 0xdd, 0x00, 0x3d,
  0xae, 0x26, 0x00, 0x3d, 0xe6, 0x5f, 0x00, 0x3e, 0x1f, 0x99, 0x00, 0x3e, 0x38,
  0x3b, 0x00, 0x3e, 0x8b, 0x0c, 0x00, 0x3e, 0xd1, 0x01, 0x00, 0x3f, 0x0d, 0x35,
  0x00, 0x3f, 0x4d, 0x80
};
static const uint32 kTestTableEntries_stco =
    sizeof(kTestTable_stco) / kEntrySize_stco;
static const uint64 kTestTableOffset_stco = 10000000;

// Human-readable kTestTable_stsc layout, it's 3 uint32s per table entry but
// the 3rd table entry is always 1 and is omitted here. If you change the stco
// test table you will also need to change kComputedFirstSamples_stsc[].
//
// first chunk | samples per chunk || computed 1st sample in chunk range
// ------------+-------------------++-----------------------------------
// 1           | 13                || 0                        = 0
// 29          | 12                || 0 + ((29 - 1) * 13)      = 364
// 30          | 13                || 364 + ((30 - 29) * 12)   = 376
// 58          | 12                || 376 + ((58 - 30) * 13)   = 740
// 59          | 13                || 740 + ((59 - 58) * 12)   = 752
// 87          | 12                || 752 + ((87 - 59) * 13)   = 1116
// 88          | 13                || 1116 + ((88 - 87) * 12)  = 1128
// 114         | 11                || 1128 + ((114 - 88) * 13) = 1466
//
static const uint8 kTestTable_stsc[] = {
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x57, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x58, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x72,
  0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x01
};
static const uint32 kTestTableEntries_stsc =
    sizeof(kTestTable_stsc) / kEntrySize_stsc;
static const uint64 kTestTableOffset_stsc = 20000000;
static const uint32 kComputedFirstSamples_stsc[] = {
  0, 364, 376, 740, 752, 1116, 1128, 1466
};

static const uint8 kTestTable_stss[] = {
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00,
  0x00, 0x78, 0x00, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00,
  0xf0, 0x00, 0x00, 0x01, 0x1b, 0x00, 0x00, 0x01, 0x45, 0x00, 0x00, 0x01, 0x6b,
  0x00, 0x00, 0x01, 0x78, 0x00, 0x00, 0x01, 0xb4, 0x00, 0x00, 0x01, 0xea, 0x00,
  0x00, 0x02, 0x1c, 0x00, 0x00, 0x02, 0x50, 0x00, 0x00, 0x02, 0x72, 0x00, 0x00,
  0x02, 0xae, 0x00, 0x00, 0x02, 0xea, 0x00, 0x00, 0x02, 0xef, 0x00, 0x00, 0x03,
  0x2b, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x03, 0x9d, 0x00, 0x00, 0x03, 0xd3,
  0x00, 0x00, 0x04, 0x0f, 0x00, 0x00, 0x04, 0x44, 0x00, 0x00, 0x04, 0x66, 0x00,
  0x00, 0x04, 0x99, 0x00, 0x00, 0x04, 0xd5, 0x00, 0x00, 0x05, 0x0d, 0x00, 0x00,
  0x05, 0x39, 0x00, 0x00, 0x05, 0x75, 0x00, 0x00, 0x05, 0xb1
};
static const uint32 kTestTableEntries_stss =
    sizeof(kTestTable_stss) / kEntrySize_stss;
static const uint64 kTestTableOffset_stss = 30000000;
static const uint32 kComputedKeyframes_stss[] = {
  0x000, 0x03c, 0x077, 0x09c, 0x0c5, 0x0ef, 0x11a, 0x144, 0x16a, 0x177, 0x1b3,
  0x1e9, 0x21b, 0x24f, 0x271, 0x2ad, 0x2e9, 0x2ee, 0x32a, 0x366, 0x39c, 0x3d2,
  0x40e, 0x443, 0x465, 0x498, 0x4d4, 0x50c, 0x538, 0x574, 0x5b0
};
static const uint64 kComputedKeyframeTimestamps_stss[] = {
  0x0000, 0x09c4, 0x135e, 0x1964, 0x2010, 0x26e6, 0x2de6, 0x34bc, 0x3aeb,
  0x3d19, 0x46dd, 0x4fa7, 0x57ca, 0x6041, 0x65ca, 0x6f8e, 0x7952, 0x7a31,
  0x83f5, 0x8db9, 0x9683, 0x9f4d, 0xa911, 0xb1b1, 0xb74a, 0xbf97, 0xc95b,
  0xd278, 0xd9a2, 0xe366, 0xed2a
};

static const uint8 kTestTable_stsz[] = {
  0x00, 0x00, 0x02, 0xce, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c,
  0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00,
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c,
  0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00,
  0x00, 0x05, 0xf4, 0x00, 0x00, 0x0a, 0x6c, 0x00, 0x00, 0x0c, 0xbb, 0x00, 0x00,
  0x0d, 0xc1, 0x00, 0x00, 0x0b, 0x4b, 0x00, 0x00, 0x03, 0x7b, 0x00, 0x00, 0x04,
  0x03, 0x00, 0x00, 0x04, 0x36, 0x00, 0x00, 0x03, 0xcd, 0x00, 0x00, 0x04, 0x48,
  0x00, 0x00, 0x04, 0x34, 0x00, 0x00, 0x04, 0x62, 0x00, 0x00, 0x04, 0x52, 0x00,
  0x00, 0x04, 0x83, 0x00, 0x00, 0x04, 0x61, 0x00, 0x00, 0x04, 0x8d, 0x00, 0x00,
  0x04, 0x5c, 0x00, 0x00, 0x04, 0x33, 0x00, 0x00, 0x04, 0x39, 0x00, 0x00, 0x04,
  0xc8, 0x00, 0x00, 0x04, 0x48, 0x00, 0x00, 0x04, 0xce, 0x00, 0x00, 0x04, 0x81,
  0x00, 0x00, 0x04, 0x97, 0x00, 0x00, 0x05, 0x18, 0x00, 0x00, 0x04, 0xd1, 0x00,
  0x00, 0x04, 0xdd, 0x00, 0x00, 0x04, 0xba, 0x00, 0x00, 0x04, 0xf6, 0x00, 0x00,
  0x05, 0x43, 0x00, 0x00, 0x04, 0xf6, 0x00, 0x00, 0x04, 0xae, 0x00, 0x00, 0x04,
  0xfa, 0x00, 0x00, 0x05, 0x12, 0x00, 0x00, 0x05, 0x3d, 0x00, 0x00, 0x05, 0x18,
  0x00, 0x00, 0x16, 0x4c, 0x00, 0x00, 0x04, 0x6f, 0x00, 0x00, 0x04, 0xaf, 0x00,
  0x00, 0x05, 0x0d, 0x00, 0x00, 0x05, 0x2e, 0x00, 0x00, 0x05, 0x7b, 0x00, 0x00,
  0x05, 0x54, 0x00, 0x00, 0x04, 0xe7, 0x00, 0x00, 0x05, 0x76, 0x00, 0x00, 0x05,
  0x76, 0x00, 0x00, 0x05, 0x29, 0x00, 0x00, 0x05, 0x1b, 0x00, 0x00, 0x05, 0x30,
  0x00, 0x00, 0x05, 0x17, 0x00, 0x00, 0x05, 0x1d, 0x00, 0x00, 0x05, 0xb3, 0x00,
  0x00, 0x05, 0x9c, 0x00, 0x00, 0x05, 0xa4, 0x00, 0x00, 0x05, 0xb7, 0x00, 0x00,
  0x05, 0x8c, 0x00, 0x00, 0x05, 0x90, 0x00, 0x00, 0x05, 0x46, 0x00, 0x00, 0x06,
  0x0b, 0x00, 0x00, 0x05, 0xf3, 0x00, 0x00, 0x06, 0x0f, 0x00, 0x00, 0x05, 0xb2,
  0x00, 0x00, 0x05, 0xda, 0x00, 0x00, 0x06, 0x31, 0x00, 0x00, 0x06, 0x99, 0x00,
  0x00, 0x06, 0x09, 0x00, 0x00, 0x07, 0x5d, 0x00, 0x00, 0x05, 0xbf, 0x00, 0x00,
  0x06, 0x2f, 0x00, 0x00, 0x05, 0xbb, 0x00, 0x00, 0x05, 0x60, 0x00, 0x00, 0x05,
  0xdc, 0x00, 0x00, 0x06, 0x03, 0x00, 0x00, 0x06, 0x19, 0x00, 0x00, 0x05, 0xb8,
  0x00, 0x00, 0x05, 0xa9, 0x00, 0x00, 0x05, 0xa5, 0x00, 0x00, 0x05, 0xcd, 0x00,
  0x00, 0x06, 0x50, 0x00, 0x00, 0x05, 0x91, 0x00, 0x00, 0x05, 0x18, 0x00, 0x00,
  0x05, 0xe8, 0x00, 0x00, 0x05, 0x74, 0x00, 0x00, 0x05, 0x2c, 0x00, 0x00, 0x05,
  0x6c, 0x00, 0x00, 0x05, 0x73, 0x00, 0x00, 0x05, 0x04, 0x00, 0x00, 0x05, 0x2c,
  0x00, 0x00, 0x05, 0x8c, 0x00, 0x00, 0x05, 0x9e, 0x00, 0x00, 0x04, 0xe7, 0x00,
  0x00, 0x04, 0x6b, 0x00, 0x00, 0x03, 0xfb, 0x00, 0x00, 0x04, 0x07, 0x00, 0x00,
  0x03, 0x65, 0x00, 0x00, 0x11, 0x82, 0x00, 0x00, 0x05, 0xc6, 0x00, 0x00, 0x07,
  0x0c, 0x00, 0x00, 0x07, 0x76, 0x00, 0x00, 0x06, 0xcd, 0x00, 0x00, 0x06, 0xe3,
  0x00, 0x00, 0x07, 0x54, 0x00, 0x00, 0x07, 0x0e, 0x00, 0x00, 0x07, 0xbc, 0x00,
  0x00, 0x07, 0x72, 0x00, 0x00, 0x08, 0x6f, 0x00, 0x00, 0x08, 0x40, 0x00, 0x00,
  0x07, 0xe1, 0x00, 0x00, 0x08, 0x3f, 0x00, 0x00, 0x08, 0xd9, 0x00, 0x00, 0x07,
  0xff, 0x00, 0x00, 0x08, 0xa2, 0x00, 0x00, 0x08, 0x47, 0x00, 0x00, 0x07, 0xe1,
  0x00, 0x00, 0x08, 0xef, 0x00, 0x00, 0x07, 0xc1, 0x00, 0x00, 0x07, 0x46, 0x00,
  0x00, 0x07, 0x29, 0x00, 0x00, 0x06, 0xdf, 0x00, 0x00, 0x06, 0xc1, 0x00, 0x00,
  0x07, 0x6b, 0x00, 0x00, 0x07, 0x7b, 0x00, 0x00, 0x07, 0x88, 0x00, 0x00, 0x07,
  0x0b, 0x00, 0x00, 0x06, 0xd4, 0x00, 0x00, 0x06, 0x05, 0x00, 0x00, 0x06, 0xed,
  0x00, 0x00, 0x06, 0x86, 0x00, 0x00, 0x06, 0x25, 0x00, 0x00, 0x07, 0x08, 0x00,
  0x00, 0x07, 0x67, 0x00, 0x00, 0x07, 0xfb, 0x00, 0x00, 0x48, 0xb4, 0x00, 0x00,
  0x01, 0x22, 0x00, 0x00, 0x02, 0x21, 0x00, 0x00, 0x02, 0x7d, 0x00, 0x00, 0x02,
  0xc1, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x7e, 0x00, 0x00, 0x03, 0xdc,
  0x00, 0x00, 0x03, 0xf7, 0x00, 0x00, 0x04, 0x94, 0x00, 0x00, 0x02, 0xf9, 0x00,
  0x00, 0x03, 0x17, 0x00, 0x00, 0x03, 0x0b, 0x00, 0x00, 0x03, 0x4e, 0x00, 0x00,
  0x03, 0xb6, 0x00, 0x00, 0x05, 0x2f, 0x00, 0x00, 0x03, 0xe4, 0x00, 0x00, 0x02,
  0xb0, 0x00, 0x00, 0x02, 0xb0, 0x00, 0x00, 0x03, 0xa9, 0x00, 0x00, 0x03, 0x8e,
  0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x03, 0x0d, 0x00, 0x00, 0x03, 0x5c, 0x00,
  0x00, 0x05, 0x39, 0x00, 0x00, 0x02, 0xa9, 0x00, 0x00, 0x03, 0x3d, 0x00, 0x00,
  0x03, 0x66, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x02, 0xaf, 0x00, 0x00, 0x02,
  0x5e, 0x00, 0x00, 0x02, 0x8f, 0x00, 0x00, 0x03, 0x28, 0x00, 0x00, 0x03, 0x46,
  0x00, 0x00, 0x02, 0xb6, 0x00, 0x00, 0x02, 0x45, 0x00, 0x00, 0x02, 0x43, 0x00,
  0x00, 0x02, 0x61, 0x00, 0x00, 0x02, 0x52, 0x00, 0x00, 0x03, 0x3f, 0x00, 0x00,
  0x02, 0x0f, 0x00, 0x00, 0x53, 0x9f, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x05,
  0x00, 0x00, 0x00, 0x05, 0x70, 0x00, 0x00, 0x05, 0xa4, 0x00, 0x00, 0x05, 0x84,
  0x00, 0x00, 0x05, 0xfa, 0x00, 0x00, 0x05, 0xb5, 0x00, 0x00, 0x05, 0x65, 0x00,
  0x00, 0x04, 0xc7, 0x00, 0x00, 0x04, 0x6d, 0x00, 0x00, 0x04, 0x28, 0x00, 0x00,
  0x04, 0x9e, 0x00, 0x00, 0x05, 0x69, 0x00, 0x00, 0x03, 0xe2, 0x00, 0x00, 0x04,
  0x6a, 0x00, 0x00, 0x03, 0xda, 0x00, 0x00, 0x04, 0x9b, 0x00, 0x00, 0x04, 0x00,
  0x00, 0x00, 0x04, 0x07, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x05, 0x02, 0x00,
  0x00, 0x04, 0x80, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x03, 0xec, 0x00, 0x00,
  0x03, 0xde, 0x00, 0x00, 0x03, 0x88, 0x00, 0x00, 0x03, 0x7b, 0x00, 0x00, 0x04,
  0x8d, 0x00, 0x00, 0x02, 0x11, 0x00, 0x00, 0x02, 0x64, 0x00, 0x00, 0x02, 0x6c,
  0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x01, 0xa4, 0x00, 0x00, 0x01, 0xce, 0x00,
  0x00, 0x01, 0xf3, 0x00, 0x00, 0x01, 0x79, 0x00, 0x00, 0x01, 0x70, 0x00, 0x00,
  0x01, 0x46, 0x00, 0x00, 0x00, 0xe3, 0x00, 0x00, 0x00, 0xa9, 0x00, 0x00, 0x00,
  0x58, 0x00, 0x00, 0x6f, 0xc1, 0x00, 0x00, 0x01, 0x59, 0x00, 0x00, 0x01, 0x99,
  0x00, 0x00, 0x01, 0xcc, 0x00, 0x00, 0x01, 0xee, 0x00, 0x00, 0x02, 0x5a, 0x00,
  0x00, 0x02, 0xff, 0x00, 0x00, 0x03, 0x72, 0x00, 0x00, 0x03, 0xdf, 0x00, 0x00,
  0x03, 0xd5, 0x00, 0x00, 0x04, 0x53, 0x00, 0x00, 0x03, 0xd8, 0x00, 0x00, 0x03,
  0xb5, 0x00, 0x00, 0x03, 0xfb, 0x00, 0x00, 0x02, 0xd6, 0x00, 0x00, 0x02, 0x93,
  0x00, 0x00, 0x05, 0x1b, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0xaa, 0x00,
  0x00, 0x02, 0x5f, 0x00, 0x00, 0x03, 0x1e, 0x00, 0x00, 0x04, 0xec, 0x00, 0x00,
  0x04, 0xee, 0x00, 0x00, 0x04, 0x1c, 0x00, 0x00, 0x04, 0x67, 0x00, 0x00, 0x03,
  0x68, 0x00, 0x00, 0x03, 0xb7, 0x00, 0x00, 0x02, 0x93, 0x00, 0x00, 0x02, 0x91,
  0x00, 0x00, 0x03, 0x66, 0x00, 0x00, 0x03, 0x84, 0x00, 0x00, 0x04, 0xf8, 0x00,
  0x00, 0x02, 0xb1, 0x00, 0x00, 0x02, 0x18, 0x00, 0x00, 0x02, 0x0c, 0x00, 0x00,
  0x02, 0x5a, 0x00, 0x00, 0x02, 0x21, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x00, 0x00,
  0xee, 0x00, 0x00, 0x01, 0x4b, 0x00, 0x00, 0x01, 0x12, 0x00, 0x00, 0x01, 0x38,
  0x00, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x60, 0xec, 0x00, 0x00, 0x01, 0x26, 0x00,
  0x00, 0x01, 0x60, 0x00, 0x00, 0x02, 0x33, 0x00, 0x00, 0x02, 0x33, 0x00, 0x00,
  0x01, 0x74, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x01, 0x1c, 0x00, 0x00, 0x02,
  0x92, 0x00, 0x00, 0x02, 0x70, 0x00, 0x00, 0x02, 0x35, 0x00, 0x00, 0x02, 0xad,
  0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x03, 0x1d, 0x00, 0x00, 0x02, 0x8a, 0x00,
  0x00, 0x01, 0xf0, 0x00, 0x00, 0x02, 0x5e, 0x00, 0x00, 0x01, 0xb9, 0x00, 0x00,
  0x04, 0xbd, 0x00, 0x00, 0x01, 0x8a, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x01,
  0x22, 0x00, 0x00, 0x01, 0x4d, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x01, 0x6b,
  0x00, 0x00, 0x01, 0x0b, 0x00, 0x00, 0x02, 0x49, 0x00, 0x00, 0x01, 0xf6, 0x00,
  0x00, 0x01, 0x11, 0x00, 0x00, 0x01, 0x0d, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00,
  0x00, 0x87, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x01, 0xaa, 0x00, 0x00, 0x00,
  0xc1, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x01, 0x2d, 0x00, 0x00, 0x00, 0x51,
  0x00, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x27, 0x00,
  0x00, 0x00, 0x4e, 0x00, 0x00, 0x72, 0x4d, 0x00, 0x00, 0x01, 0x62, 0x00, 0x00,
  0x01, 0x90, 0x00, 0x00, 0x01, 0xcf, 0x00, 0x00, 0x01, 0xb9, 0x00, 0x00, 0x02,
  0x0e, 0x00, 0x00, 0x02, 0xb1, 0x00, 0x00, 0x01, 0x9f, 0x00, 0x00, 0x01, 0xb0,
  0x00, 0x00, 0x02, 0x38, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x04, 0xbe, 0x00,
  0x00, 0x06, 0x25, 0x00, 0x00, 0x06, 0x9b, 0x00, 0x00, 0x06, 0xe4, 0x00, 0x00,
  0x07, 0x32, 0x00, 0x00, 0x06, 0x98, 0x00, 0x00, 0x06, 0xaf, 0x00, 0x00, 0x07,
  0x10, 0x00, 0x00, 0x06, 0x59, 0x00, 0x00, 0x06, 0xe8, 0x00, 0x00, 0x07, 0xcb,
  0x00, 0x00, 0x05, 0x1a, 0x00, 0x00, 0x05, 0x43, 0x00, 0x00, 0x05, 0xc8, 0x00,
  0x00, 0x05, 0x67, 0x00, 0x00, 0x04, 0xc9, 0x00, 0x00, 0x04, 0x5b, 0x00, 0x00,
  0x04, 0x58, 0x00, 0x00, 0x03, 0x39, 0x00, 0x00, 0x03, 0x19, 0x00, 0x00, 0x02,
  0xad, 0x00, 0x00, 0x03, 0x22, 0x00, 0x00, 0x03, 0x8f, 0x00, 0x00, 0x03, 0x2e,
  0x00, 0x00, 0x02, 0xf6, 0x00, 0x00, 0x02, 0x8a, 0x00, 0x00, 0x01, 0x1f, 0x00,
  0x00, 0x31, 0x0f, 0x00, 0x00, 0x02, 0x72, 0x00, 0x00, 0x03, 0x57, 0x00, 0x00,
  0x04, 0x41, 0x00, 0x00, 0x04, 0xcf, 0x00, 0x00, 0x04, 0xcd, 0x00, 0x00, 0x05,
  0x4e, 0x00, 0x00, 0x06, 0x2f, 0x00, 0x00, 0x06, 0x3a, 0x00, 0x00, 0x05, 0x5b,
  0x00, 0x00, 0x04, 0xa5, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x04, 0x50, 0x00,
  0x00, 0x35, 0x0a, 0x00, 0x00, 0x04, 0x1e, 0x00, 0x00, 0x05, 0x3e, 0x00, 0x00,
  0x05, 0x5e, 0x00, 0x00, 0x05, 0x78, 0x00, 0x00, 0x04, 0x86, 0x00, 0x00, 0x04,
  0xee, 0x00, 0x00, 0x04, 0x07, 0x00, 0x00, 0x03, 0xf9, 0x00, 0x00, 0x03, 0x69,
  0x00, 0x00, 0x02, 0xe2, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 0x87, 0x00,
  0x00, 0x02, 0x3e, 0x00, 0x00, 0x02, 0x09, 0x00, 0x00, 0x02, 0x37, 0x00, 0x00,
  0x01, 0x5c, 0x00, 0x00, 0x01, 0x18, 0x00, 0x00, 0x47, 0x8d, 0x00, 0x00, 0x03,
  0xa6, 0x00, 0x00, 0x05, 0xb4, 0x00, 0x00, 0x06, 0xa2, 0x00, 0x00, 0x09, 0x16,
  0x00, 0x00, 0x0a, 0x45, 0x00, 0x00, 0x0b, 0xde, 0x00, 0x00, 0x09, 0xf0, 0x00,
  0x00, 0x09, 0xed, 0x00, 0x00, 0x09, 0x43, 0x00, 0x00, 0x09, 0x97, 0x00, 0x00,
  0x09, 0x84, 0x00, 0x00, 0x0c, 0x0e, 0x00, 0x00, 0x07, 0xc6, 0x00, 0x00, 0x07,
  0x93, 0x00, 0x00, 0x07, 0x5e, 0x00, 0x00, 0x07, 0x5b, 0x00, 0x00, 0x06, 0xef,
  0x00, 0x00, 0x06, 0xe1, 0x00, 0x00, 0x06, 0xcf, 0x00, 0x00, 0x07, 0x07, 0x00,
  0x00, 0x07, 0x8c, 0x00, 0x00, 0x06, 0xba, 0x00, 0x00, 0x07, 0xa1, 0x00, 0x00,
  0x08, 0x17, 0x00, 0x00, 0x08, 0xda, 0x00, 0x00, 0x09, 0x52, 0x00, 0x00, 0x0b,
  0x86, 0x00, 0x00, 0x09, 0x1a, 0x00, 0x00, 0x08, 0x96, 0x00, 0x00, 0x07, 0xaf,
  0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x08, 0xf8, 0x00, 0x00, 0x09, 0x08, 0x00,
  0x00, 0x09, 0xd4, 0x00, 0x00, 0x0a, 0xbf, 0x00, 0x00, 0x0b, 0x35, 0x00, 0x00,
  0x0b, 0x7c, 0x00, 0x00, 0x09, 0x71, 0x00, 0x00, 0x09, 0x3c, 0x00, 0x00, 0x09,
  0x43, 0x00, 0x00, 0x08, 0xd2, 0x00, 0x00, 0x5b, 0x46, 0x00, 0x00, 0x03, 0x23,
  0x00, 0x00, 0x04, 0x85, 0x00, 0x00, 0x04, 0xb3, 0x00, 0x00, 0x05, 0x23, 0x00,
  0x00, 0x04, 0xf8, 0x00, 0x00, 0x04, 0x53, 0x00, 0x00, 0x03, 0xc9, 0x00, 0x00,
  0x03, 0x49, 0x00, 0x00, 0x03, 0x44, 0x00, 0x00, 0x03, 0x1a, 0x00, 0x00, 0x02,
  0xe4, 0x00, 0x00, 0x02, 0xeb, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x27, 0xf9,
  0x00, 0x00, 0x02, 0x69, 0x00, 0x00, 0x01, 0xf1, 0x00, 0x00, 0x01, 0x85, 0x00,
  0x00, 0x01, 0x85, 0x00, 0x00, 0x01, 0xb6, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00,
  0x02, 0x11, 0x00, 0x00, 0x01, 0xe9, 0x00, 0x00, 0x02, 0x59, 0x00, 0x00, 0x02,
  0x57, 0x00, 0x00, 0x02, 0x45, 0x00, 0x00, 0x01, 0xe3, 0x00, 0x00, 0x02, 0x18,
  0x00, 0x00, 0x01, 0xc1, 0x00, 0x00, 0x02, 0x11, 0x00, 0x00, 0x03, 0x30, 0x00,
  0x00, 0x01, 0xbf, 0x00, 0x00, 0x01, 0x7e, 0x00, 0x00, 0x02, 0x62, 0x00, 0x00,
  0x01, 0x20, 0x00, 0x00, 0x01, 0xbb, 0x00, 0x00, 0x01, 0x6b, 0x00, 0x00, 0x01,
  0x93, 0x00, 0x00, 0x01, 0xe2, 0x00, 0x00, 0x01, 0xe8, 0x00, 0x00, 0x01, 0xf0,
  0x00, 0x00, 0x01, 0xe7, 0x00, 0x00, 0x02, 0x41, 0x00, 0x00, 0x01, 0x65, 0x00,
  0x00, 0x01, 0xbb, 0x00, 0x00, 0x02, 0x69, 0x00, 0x00, 0x02, 0x0d, 0x00, 0x00,
  0x01, 0xef, 0x00, 0x00, 0x01, 0xd2, 0x00, 0x00, 0x01, 0xf9, 0x00, 0x00, 0x01,
  0xd0, 0x00, 0x00, 0x01, 0x7e, 0x00, 0x00, 0x01, 0x7c, 0x00, 0x00, 0x01, 0x18,
  0x00, 0x00, 0x5c, 0x58, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x01, 0xac, 0x00,
  0x00, 0x02, 0x22, 0x00, 0x00, 0x02, 0xce, 0x00, 0x00, 0x03, 0x48, 0x00, 0x00,
  0x04, 0x11, 0x00, 0x00, 0x03, 0xab, 0x00, 0x00, 0x03, 0x9a, 0x00, 0x00, 0x03,
  0xad, 0x00, 0x00, 0x04, 0x6b, 0x00, 0x00, 0x04, 0xa1, 0x00, 0x00, 0x05, 0x45,
  0x00, 0x00, 0x05, 0x66, 0x00, 0x00, 0x06, 0x34, 0x00, 0x00, 0x06, 0x30, 0x00,
  0x00, 0x07, 0x0f, 0x00, 0x00, 0x06, 0x7f, 0x00, 0x00, 0x07, 0x88, 0x00, 0x00,
  0x06, 0xf8, 0x00, 0x00, 0x07, 0x05, 0x00, 0x00, 0x08, 0xef, 0x00, 0x00, 0x06,
  0xbc, 0x00, 0x00, 0x07, 0x18, 0x00, 0x00, 0x06, 0xa9, 0x00, 0x00, 0x06, 0x3d,
  0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x06, 0xb9, 0x00, 0x00, 0x06, 0xa2, 0x00,
  0x00, 0x06, 0xa2, 0x00, 0x00, 0x07, 0x75, 0x00, 0x00, 0x07, 0x08, 0x00, 0x00,
  0x06, 0x15, 0x00, 0x00, 0x06, 0x17, 0x00, 0x00, 0x06, 0x1a, 0x00, 0x00, 0x05,
  0x50, 0x00, 0x00, 0x07, 0xe1, 0x00, 0x00, 0x06, 0x97, 0x00, 0x00, 0x06, 0x70,
  0x00, 0x00, 0x06, 0x8b, 0x00, 0x00, 0x05, 0x65, 0x00, 0x00, 0x04, 0xb9, 0x00,
  0x00, 0x04, 0xbd, 0x00, 0x00, 0x04, 0x42, 0x00, 0x00, 0x03, 0xa2, 0x00, 0x00,
  0x03, 0xca, 0x00, 0x00, 0x03, 0x38, 0x00, 0x00, 0x02, 0xae, 0x00, 0x00, 0x02,
  0x0e, 0x00, 0x00, 0x01, 0xba, 0x00, 0x00, 0x17, 0x71, 0x00, 0x00, 0x03, 0xbf,
  0x00, 0x00, 0x02, 0xf6, 0x00, 0x00, 0x02, 0xc1, 0x00, 0x00, 0x03, 0x27, 0x00,
  0x00, 0x03, 0x08, 0x00, 0x00, 0x03, 0x04, 0x00, 0x00, 0x02, 0xad, 0x00, 0x00,
  0x03, 0x93, 0x00, 0x00, 0x03, 0x0b, 0x00, 0x00, 0x02, 0xe4, 0x00, 0x00, 0x02,
  0xaf, 0x00, 0x00, 0x02, 0xb3, 0x00, 0x00, 0x02, 0x7f, 0x00, 0x00, 0x02, 0x78,
  0x00, 0x00, 0x02, 0xcc, 0x00, 0x00, 0x03, 0x8b, 0x00, 0x00, 0x03, 0xce, 0x00,
  0x00, 0x04, 0x5e, 0x00, 0x00, 0x04, 0x6b, 0x00, 0x00, 0x03, 0xdc, 0x00, 0x00,
  0x03, 0xdd, 0x00, 0x00, 0x03, 0x7e, 0x00, 0x00, 0x03, 0x97, 0x00, 0x00, 0x03,
  0x87, 0x00, 0x00, 0x03, 0x8c, 0x00, 0x00, 0x03, 0xc7, 0x00, 0x00, 0x04, 0x9d,
  0x00, 0x00, 0x04, 0x7a, 0x00, 0x00, 0x04, 0xc3, 0x00, 0x00, 0x04, 0x4a, 0x00,
  0x00, 0x05, 0x76, 0x00, 0x00, 0x05, 0x04, 0x00, 0x00, 0x05, 0x0c, 0x00, 0x00,
  0x04, 0x25, 0x00, 0x00, 0x03, 0xea, 0x00, 0x00, 0x03, 0xe5, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x04, 0x88, 0x00, 0x00, 0x04, 0xc2, 0x00, 0x00, 0x04, 0xcc,
  0x00, 0x00, 0x04, 0x79, 0x00, 0x00, 0x04, 0xbf, 0x00, 0x00, 0x04, 0x49, 0x00,
  0x00, 0x04, 0x56, 0x00, 0x00, 0x03, 0xbb, 0x00, 0x00, 0x04, 0x81, 0x00, 0x00,
  0x04, 0x36, 0x00, 0x00, 0x02, 0xf5, 0x00, 0x00, 0x02, 0xe6, 0x00, 0x00, 0x02,
  0xa6, 0x00, 0x00, 0x02, 0x7c, 0x00, 0x00, 0x38, 0x63, 0x00, 0x00, 0x03, 0xcd,
  0x00, 0x00, 0x05, 0xd1, 0x00, 0x00, 0x07, 0x26, 0x00, 0x00, 0x08, 0x5c, 0x00,
  0x00, 0x0a, 0xdb, 0x00, 0x00, 0x0d, 0xb3, 0x00, 0x00, 0x0d, 0xea, 0x00, 0x00,
  0x0e, 0x1b, 0x00, 0x00, 0x0c, 0x21, 0x00, 0x00, 0x08, 0xcc, 0x00, 0x00, 0x07,
  0xb4, 0x00, 0x00, 0x06, 0x74, 0x00, 0x00, 0x06, 0x75, 0x00, 0x00, 0x07, 0x40,
  0x00, 0x00, 0x06, 0x84, 0x00, 0x00, 0x06, 0xd4, 0x00, 0x00, 0x06, 0xa2, 0x00,
  0x00, 0x06, 0x4b, 0x00, 0x00, 0x05, 0x63, 0x00, 0x00, 0x05, 0x99, 0x00, 0x00,
  0x05, 0x02, 0x00, 0x00, 0x04, 0xc8, 0x00, 0x00, 0x03, 0x81, 0x00, 0x00, 0x05,
  0x09, 0x00, 0x00, 0x03, 0x1c, 0x00, 0x00, 0x03, 0x43, 0x00, 0x00, 0x03, 0x93,
  0x00, 0x00, 0x03, 0x28, 0x00, 0x00, 0x03, 0x59, 0x00, 0x00, 0x03, 0x29, 0x00,
  0x00, 0x03, 0x27, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x03, 0x51, 0x00, 0x00,
  0x50, 0x36, 0x00, 0x00, 0x02, 0xee, 0x00, 0x00, 0x03, 0xf9, 0x00, 0x00, 0x05,
  0x78, 0x00, 0x00, 0x06, 0x45, 0x00, 0x00, 0x07, 0x71, 0x00, 0x00, 0x06, 0x40,
  0x00, 0x00, 0x06, 0xe2, 0x00, 0x00, 0x07, 0xbf, 0x00, 0x00, 0x08, 0x03, 0x00,
  0x00, 0x08, 0xc4, 0x00, 0x00, 0x08, 0xd8, 0x00, 0x00, 0x09, 0x10, 0x00, 0x00,
  0x09, 0x2e, 0x00, 0x00, 0x09, 0x7f, 0x00, 0x00, 0x0a, 0x8a, 0x00, 0x00, 0x0b,
  0x78, 0x00, 0x00, 0x0d, 0xc5, 0x00, 0x00, 0x0d, 0xa2, 0x00, 0x00, 0x0c, 0x7d,
  0x00, 0x00, 0x0f, 0x29, 0x00, 0x00, 0x0c, 0x7a, 0x00, 0x00, 0x0c, 0xd2, 0x00,
  0x00, 0x0c, 0xea, 0x00, 0x00, 0x0c, 0xf7, 0x00, 0x00, 0x0b, 0xd2, 0x00, 0x00,
  0x0b, 0x6d, 0x00, 0x00, 0x0c, 0x6e, 0x00, 0x00, 0x0b, 0x90, 0x00, 0x00, 0x0b,
  0x84, 0x00, 0x00, 0x09, 0xe2, 0x00, 0x00, 0x09, 0xc2, 0x00, 0x00, 0x09, 0x32,
  0x00, 0x00, 0x06, 0xe3, 0x00, 0x00, 0x05, 0xb3, 0x00, 0x00, 0x0a, 0x01, 0x00,
  0x00, 0x07, 0x2c, 0x00, 0x00, 0x07, 0x83, 0x00, 0x00, 0x06, 0xdf, 0x00, 0x00,
  0x06, 0x6e, 0x00, 0x00, 0x07, 0xdb, 0x00, 0x00, 0x07, 0x99, 0x00, 0x00, 0x08,
  0x96, 0x00, 0x00, 0x08, 0x44, 0x00, 0x00, 0x08, 0x87, 0x00, 0x00, 0x08, 0xc8,
  0x00, 0x00, 0x08, 0x43, 0x00, 0x00, 0x07, 0xfb, 0x00, 0x00, 0x08, 0xbf, 0x00,
  0x00, 0x08, 0xf5, 0x00, 0x00, 0x0b, 0x2f, 0x00, 0x00, 0x0a, 0x53, 0x00, 0x00,
  0x0a, 0xec, 0x00, 0x00, 0x0b, 0x43, 0x00, 0x00, 0x0b, 0x29, 0x00, 0x00, 0x0b,
  0x08, 0x00, 0x00, 0x0a, 0x0f, 0x00, 0x00, 0x09, 0x9e, 0x00, 0x00, 0x09, 0xc1,
  0x00, 0x00, 0x0a, 0x22, 0x00, 0x00, 0x51, 0xc7, 0x00, 0x00, 0x05, 0x51, 0x00,
  0x00, 0x07, 0x34, 0x00, 0x00, 0x07, 0xa4, 0x00, 0x00, 0x09, 0x0f, 0x00, 0x00,
  0x0b, 0xb3, 0x00, 0x00, 0x09, 0x82, 0x00, 0x00, 0x08, 0xe8, 0x00, 0x00, 0x09,
  0x3b, 0x00, 0x00, 0x09, 0x26, 0x00, 0x00, 0x09, 0x22, 0x00, 0x00, 0x07, 0xfc,
  0x00, 0x00, 0x08, 0x0a, 0x00, 0x00, 0x08, 0x50, 0x00, 0x00, 0x08, 0x8d, 0x00,
  0x00, 0x06, 0xd8, 0x00, 0x00, 0x05, 0xfb, 0x00, 0x00, 0x05, 0x37, 0x00, 0x00,
  0x05, 0x14, 0x00, 0x00, 0x04, 0xf7, 0x00, 0x00, 0x05, 0x31, 0x00, 0x00, 0x03,
  0x7e, 0x00, 0x00, 0x03, 0x47, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x02, 0xb3,
  0x00, 0x00, 0x01, 0xa9, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x00, 0x85, 0xda, 0x00,
  0x00, 0x11, 0x09, 0x00, 0x00, 0x19, 0xdd, 0x00, 0x00, 0x1c, 0x21, 0x00, 0x00,
  0x1f, 0xec, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0x14, 0x00, 0x00, 0x1e,
  0x1a, 0x00, 0x00, 0x22, 0x1e, 0x00, 0x00, 0x18, 0x88, 0x00, 0x00, 0x1f, 0x89,
  0x00, 0x00, 0x1a, 0xcc, 0x00, 0x00, 0x19, 0x6b, 0x00, 0x00, 0x1e, 0xc1, 0x00,
  0x00, 0x1c, 0x97, 0x00, 0x00, 0x1d, 0x9d, 0x00, 0x00, 0x1b, 0x93, 0x00, 0x00,
  0x1f, 0x85, 0x00, 0x00, 0x1c, 0xc4, 0x00, 0x00, 0x19, 0xc7, 0x00, 0x00, 0x1c,
  0x44, 0x00, 0x00, 0x1b, 0x35, 0x00, 0x00, 0x1b, 0x94, 0x00, 0x00, 0x21, 0x62,
  0x00, 0x00, 0x1b, 0xda, 0x00, 0x00, 0x1b, 0x6a, 0x00, 0x00, 0x1d, 0x9c, 0x00,
  0x00, 0x1f, 0x22, 0x00, 0x00, 0x19, 0x11, 0x00, 0x00, 0x1a, 0x28, 0x00, 0x00,
  0x1b, 0x9a, 0x00, 0x00, 0x18, 0x11, 0x00, 0x00, 0x18, 0x30, 0x00, 0x00, 0x8d,
  0xcd, 0x00, 0x00, 0x0c, 0x18, 0x00, 0x00, 0x10, 0x3a, 0x00, 0x00, 0x0b, 0x42,
  0x00, 0x00, 0x0d, 0x71, 0x00, 0x00, 0x75, 0x4a, 0x00, 0x00, 0x0c, 0x4c, 0x00,
  0x00, 0x10, 0x88, 0x00, 0x00, 0x11, 0x2b, 0x00, 0x00, 0x12, 0xa6, 0x00, 0x00,
  0x10, 0x54, 0x00, 0x00, 0x11, 0xf3, 0x00, 0x00, 0x12, 0x10, 0x00, 0x00, 0x11,
  0x0f, 0x00, 0x00, 0x10, 0xb8, 0x00, 0x00, 0x11, 0x6d, 0x00, 0x00, 0x11, 0x3e,
  0x00, 0x00, 0x0f, 0xca, 0x00, 0x00, 0x10, 0x46, 0x00, 0x00, 0x11, 0xb0, 0x00,
  0x00, 0x10, 0xcb, 0x00, 0x00, 0x0e, 0x23, 0x00, 0x00, 0x0d, 0x2d, 0x00, 0x00,
  0x0d, 0x4e, 0x00, 0x00, 0x0e, 0x35, 0x00, 0x00, 0x0b, 0x9a, 0x00, 0x00, 0x09,
  0xb1, 0x00, 0x00, 0x37, 0xe1, 0x00, 0x00, 0x01, 0x56, 0x00, 0x00, 0x01, 0x95,
  0x00, 0x00, 0x02, 0x18, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x21, 0x00,
  0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x03, 0x6b, 0x00, 0x00,
  0x00, 0x99, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x02, 0x94, 0x00, 0x00, 0x03,
  0x30, 0x00, 0x00, 0x03, 0xc9, 0x00, 0x00, 0x03, 0xcf, 0x00, 0x00, 0x02, 0xa1,
  0x00, 0x00, 0x01, 0xa6, 0x00, 0x00, 0x02, 0x4f, 0x00, 0x00, 0x02, 0x58, 0x00,
  0x00, 0x02, 0xbe, 0x00, 0x00, 0x03, 0x21, 0x00, 0x00, 0x07, 0x40, 0x00, 0x00,
  0x0a, 0x4f, 0x00, 0x00, 0x0d, 0x7e, 0x00, 0x00, 0x0c, 0xcf, 0x00, 0x00, 0x0c,
  0xe2, 0x00, 0x00, 0x0c, 0x05, 0x00, 0x00, 0x0a, 0xd1, 0x00, 0x00, 0x0b, 0x5d,
  0x00, 0x00, 0x0b, 0x6d, 0x00, 0x00, 0x0a, 0xa8, 0x00, 0x00, 0x0a, 0x88, 0x00,
  0x00, 0x09, 0x49, 0x00, 0x00, 0x08, 0x32, 0x00, 0x00, 0x07, 0xc9, 0x00, 0x00,
  0x06, 0xcc, 0x00, 0x00, 0x07, 0x05, 0x00, 0x00, 0x06, 0x3e, 0x00, 0x00, 0x25,
  0x2a, 0x00, 0x00, 0x74, 0xef, 0x00, 0x00, 0x0b, 0x70, 0x00, 0x00, 0x0e, 0x52,
  0x00, 0x00, 0x0f, 0xb6, 0x00, 0x00, 0x10, 0x6d, 0x00, 0x00, 0x11, 0x23, 0x00,
  0x00, 0x11, 0x7a, 0x00, 0x00, 0x11, 0xaf, 0x00, 0x00, 0x0f, 0x0e, 0x00, 0x00,
  0x0e, 0x5b, 0x00, 0x00, 0x12, 0x77, 0x00, 0x00, 0x11, 0x8c, 0x00, 0x00, 0x13,
  0xc9, 0x00, 0x00, 0x12, 0x31, 0x00, 0x00, 0x15, 0xba, 0x00, 0x00, 0x11, 0x10,
  0x00, 0x00, 0x0e, 0xba, 0x00, 0x00, 0x11, 0xd5, 0x00, 0x00, 0x14, 0xa1, 0x00,
  0x00, 0x10, 0x05, 0x00, 0x00, 0x11, 0x46, 0x00, 0x00, 0x13, 0x4c, 0x00, 0x00,
  0x0f, 0x64, 0x00, 0x00, 0x11, 0x4f, 0x00, 0x00, 0x11, 0x95, 0x00, 0x00, 0x13,
  0xbe, 0x00, 0x00, 0x13, 0x1e, 0x00, 0x00, 0x14, 0x6d, 0x00, 0x00, 0x13, 0x8a,
  0x00, 0x00, 0x15, 0xe6, 0x00, 0x00, 0x11, 0x06, 0x00, 0x00, 0x12, 0x7a, 0x00,
  0x00, 0x12, 0xfd, 0x00, 0x00, 0x11, 0xbd, 0x00, 0x00, 0x14, 0xf6, 0x00, 0x00,
  0x13, 0xc0, 0x00, 0x00, 0x14, 0x5d, 0x00, 0x00, 0x13, 0xf3, 0x00, 0x00, 0x11,
  0x3a, 0x00, 0x00, 0x15, 0xcd, 0x00, 0x00, 0x10, 0x79, 0x00, 0x00, 0x12, 0xf0,
  0x00, 0x00, 0x12, 0x8d, 0x00, 0x00, 0x11, 0x0e, 0x00, 0x00, 0x14, 0x59, 0x00,
  0x00, 0x12, 0x6f, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x00, 0x11, 0xe8, 0x00, 0x00,
  0x13, 0x5b, 0x00, 0x00, 0x11, 0x2d, 0x00, 0x00, 0x11, 0xee, 0x00, 0x00, 0x11,
  0xae, 0x00, 0x00, 0x10, 0x5d, 0x00, 0x00, 0x0f, 0xbb, 0x00, 0x00, 0x10, 0xfa,
  0x00, 0x00, 0x11, 0x33, 0x00, 0x00, 0x10, 0x81, 0x00, 0x00, 0x11, 0x5b, 0x00,
  0x00, 0x0e, 0x8b, 0x00, 0x00, 0x84, 0x3f, 0x00, 0x00, 0x06, 0x12, 0x00, 0x00,
  0x09, 0xba, 0x00, 0x00, 0x0b, 0x4d, 0x00, 0x00, 0x0a, 0xed, 0x00, 0x00, 0x0a,
  0x60, 0x00, 0x00, 0x09, 0xc0, 0x00, 0x00, 0x05, 0x22, 0x00, 0x00, 0x25, 0x3a,
  0x00, 0x00, 0x0c, 0x15, 0x00, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x0b, 0xd8, 0x00,
  0x00, 0x0c, 0x6f, 0x00, 0x00, 0x0c, 0x8c, 0x00, 0x00, 0x0d, 0x7c, 0x00, 0x00,
  0x0e, 0x58, 0x00, 0x00, 0x0d, 0xec, 0x00, 0x00, 0x0f, 0x27, 0x00, 0x00, 0x0e,
  0x82, 0x00, 0x00, 0x0f, 0xb2, 0x00, 0x00, 0x0f, 0x30, 0x00, 0x00, 0x0f, 0x37,
  0x00, 0x00, 0x0f, 0xae, 0x00, 0x00, 0x0f, 0xdc, 0x00, 0x00, 0x0f, 0xe0, 0x00,
  0x00, 0x0f, 0xd1, 0x00, 0x00, 0x10, 0x37, 0x00, 0x00, 0x10, 0x94, 0x00, 0x00,
  0x0f, 0xdd, 0x00, 0x00, 0x0e, 0xc7, 0x00, 0x00, 0x0d, 0xce, 0x00, 0x00, 0x0d,
  0xfe, 0x00, 0x00, 0x0d, 0xde, 0x00, 0x00, 0x0e, 0x93, 0x00, 0x00, 0x0f, 0x64,
  0x00, 0x00, 0x0e, 0x89, 0x00, 0x00, 0x0f, 0x41, 0x00, 0x00, 0x0e, 0x86, 0x00,
  0x00, 0x0e, 0xeb, 0x00, 0x00, 0x0f, 0x8f, 0x00, 0x00, 0x0e, 0xae, 0x00, 0x00,
  0x0d, 0xf2, 0x00, 0x00, 0x0f, 0x6a, 0x00, 0x00, 0x0d, 0x5e, 0x00, 0x00, 0x0c,
  0xea, 0x00, 0x00, 0x0d, 0xcf, 0x00, 0x00, 0x0b, 0x25, 0x00, 0x00, 0x0a, 0xf2,
  0x00, 0x00, 0x0a, 0x0b, 0x00, 0x00, 0x09, 0x4d, 0x00, 0x00, 0x09, 0x24, 0x00,
  0x00, 0x08, 0x75, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x07, 0x4d, 0x00, 0x00,
  0x43, 0x7b, 0x00, 0x00, 0x03, 0x3b, 0x00, 0x00, 0x04, 0xe6, 0x00, 0x00, 0x05,
  0x6b, 0x00, 0x00, 0x05, 0xe7, 0x00, 0x00, 0x06, 0x57, 0x00, 0x00, 0x07, 0x0b,
  0x00, 0x00, 0x06, 0x94, 0x00, 0x00, 0x06, 0x67, 0x00, 0x00, 0x07, 0x10, 0x00,
  0x00, 0x06, 0xb7, 0x00, 0x00, 0x07, 0x38, 0x00, 0x00, 0x07, 0x13, 0x00, 0x00,
  0x07, 0x51, 0x00, 0x00, 0x08, 0x09, 0x00, 0x00, 0x07, 0x70, 0x00, 0x00, 0x07,
  0x1a, 0x00, 0x00, 0x06, 0xd4, 0x00, 0x00, 0x07, 0x9e, 0x00, 0x00, 0x07, 0x67,
  0x00, 0x00, 0x07, 0xc2, 0x00, 0x00, 0x08, 0xdd, 0x00, 0x00, 0x07, 0xb3, 0x00,
  0x00, 0x07, 0x73, 0x00, 0x00, 0x07, 0xd0, 0x00, 0x00, 0x08, 0x39, 0x00, 0x00,
  0x07, 0xae, 0x00, 0x00, 0x08, 0x64, 0x00, 0x00, 0x08, 0x47, 0x00, 0x00, 0x08,
  0x31, 0x00, 0x00, 0x08, 0x87, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x07, 0xec,
  0x00, 0x00, 0x08, 0x1a, 0x00, 0x00, 0x07, 0xa9, 0x00, 0x00, 0x07, 0xbd, 0x00,
  0x00, 0x08, 0xcb, 0x00, 0x00, 0x07, 0xc1, 0x00, 0x00, 0x07, 0x74, 0x00, 0x00,
  0x07, 0x23, 0x00, 0x00, 0x07, 0x20, 0x00, 0x00, 0x07, 0x7f, 0x00, 0x00, 0x07,
  0x34, 0x00, 0x00, 0x06, 0x5f, 0x00, 0x00, 0x06, 0x13, 0x00, 0x00, 0x06, 0x96,
  0x00, 0x00, 0x05, 0x2e, 0x00, 0x00, 0x05, 0xa3, 0x00, 0x00, 0x05, 0x81, 0x00,
  0x00, 0x05, 0x03, 0x00, 0x00, 0x03, 0xb9, 0x00, 0x00, 0x04, 0x52, 0x00, 0x00,
  0x03, 0x1e, 0x00, 0x00, 0x02, 0x16, 0x00, 0x00, 0x5b, 0x0a, 0x00, 0x00, 0x0c,
  0x81, 0x00, 0x00, 0x0e, 0x2a, 0x00, 0x00, 0x10, 0x55, 0x00, 0x00, 0x10, 0xd9,
  0x00, 0x00, 0x11, 0x9e, 0x00, 0x00, 0x10, 0x57, 0x00, 0x00, 0x10, 0x27, 0x00,
  0x00, 0x10, 0x41, 0x00, 0x00, 0x0f, 0x5e, 0x00, 0x00, 0x11, 0x25, 0x00, 0x00,
  0x12, 0x36, 0x00, 0x00, 0x13, 0xce, 0x00, 0x00, 0x12, 0xe2, 0x00, 0x00, 0x12,
  0x4c, 0x00, 0x00, 0x11, 0xd2, 0x00, 0x00, 0x10, 0xd1, 0x00, 0x00, 0x10, 0xc5,
  0x00, 0x00, 0x12, 0xb3, 0x00, 0x00, 0x12, 0x27, 0x00, 0x00, 0x10, 0x18, 0x00,
  0x00, 0x0f, 0x31, 0x00, 0x00, 0x0f, 0xb6, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00,
  0x0c, 0x27, 0x00, 0x00, 0x0a, 0xab, 0x00, 0x00, 0x0b, 0xa9, 0x00, 0x00, 0x0e,
  0x9c, 0x00, 0x00, 0x0a, 0x67, 0x00, 0x00, 0x0c, 0xd2, 0x00, 0x00, 0x0c, 0x1c,
  0x00, 0x00, 0x0e, 0x08, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x00, 0x0f, 0x60, 0x00,
  0x00, 0x0e, 0x1b, 0x00, 0x00, 0x0e, 0x53, 0x00, 0x00, 0x0d, 0x0b, 0x00, 0x00,
  0x0b, 0xfa, 0x00, 0x00, 0x0b, 0x20, 0x00, 0x00, 0x0a, 0x78, 0x00, 0x00, 0x0a,
  0x4a, 0x00, 0x00, 0x0c, 0x76, 0x00, 0x00, 0x0e, 0xc1, 0x00, 0x00, 0x0c, 0x40,
  0x00, 0x00, 0x0b, 0xcb, 0x00, 0x00, 0x0a, 0x20, 0x00, 0x00, 0x0a, 0x56, 0x00,
  0x00, 0x0b, 0x5d, 0x00, 0x00, 0x0b, 0x1c, 0x00, 0x00, 0x0b, 0x6f, 0x00, 0x00,
  0x0a, 0xaa, 0x00, 0x00, 0x0a, 0x75, 0x00, 0x00, 0x09, 0x94, 0x00, 0x00, 0x09,
  0x1a, 0x00, 0x00, 0x08, 0x73, 0x00, 0x00, 0x0b, 0x1c, 0x00, 0x00, 0x07, 0xc0,
  0x00, 0x00, 0x0a, 0x3b, 0x00, 0x00, 0x05, 0x9c, 0x00, 0x00, 0x06, 0xf2, 0x00,
  0x00, 0x61, 0xa1, 0x00, 0x00, 0x01, 0x7b, 0x00, 0x00, 0x01, 0xf6, 0x00, 0x00,
  0x23, 0x17, 0x00, 0x00, 0x0a, 0x6a, 0x00, 0x00, 0x0e, 0xea, 0x00, 0x00, 0x0f,
  0x38, 0x00, 0x00, 0x10, 0xf1, 0x00, 0x00, 0x0e, 0x32, 0x00, 0x00, 0x0b, 0xbf,
  0x00, 0x00, 0x0d, 0xb1, 0x00, 0x00, 0x0d, 0x54, 0x00, 0x00, 0x0e, 0x9a, 0x00,
  0x00, 0x0e, 0x2e, 0x00, 0x00, 0x0e, 0x4e, 0x00, 0x00, 0x0f, 0x0b, 0x00, 0x00,
  0x0b, 0xeb, 0x00, 0x00, 0x08, 0x7b, 0x00, 0x00, 0x0a, 0xa3, 0x00, 0x00, 0x0a,
  0x0a, 0x00, 0x00, 0x09, 0xb9, 0x00, 0x00, 0x08, 0x9d, 0x00, 0x00, 0x07, 0xc3,
  0x00, 0x00, 0x07, 0x68, 0x00, 0x00, 0x07, 0xa3, 0x00, 0x00, 0x07, 0xa8, 0x00,
  0x00, 0x07, 0xbd, 0x00, 0x00, 0x09, 0xbd, 0x00, 0x00, 0x07, 0xcd, 0x00, 0x00,
  0x07, 0xe6, 0x00, 0x00, 0x09, 0xe5, 0x00, 0x00, 0x08, 0x39, 0x00, 0x00, 0x07,
  0x34, 0x00, 0x00, 0x05, 0x9b, 0x00, 0x00, 0x05, 0x14, 0x00, 0x00, 0x05, 0x05,
  0x00, 0x00, 0x06, 0x7a, 0x00, 0x00, 0x07, 0xb2, 0x00, 0x00, 0x09, 0x2d, 0x00,
  0x00, 0x09, 0x87, 0x00, 0x00, 0x09, 0xdb, 0x00, 0x00, 0x09, 0x78, 0x00, 0x00,
  0x09, 0x26, 0x00, 0x00, 0x08, 0xf8, 0x00, 0x00, 0x08, 0xe9, 0x00, 0x00, 0x07,
  0x72, 0x00, 0x00, 0x05, 0xec, 0x00, 0x00, 0x04, 0x55, 0x00, 0x00, 0x04, 0xd6,
  0x00, 0x00, 0x04, 0x8e, 0x00, 0x00, 0x04, 0xbc, 0x00, 0x00, 0x03, 0xb9, 0x00,
  0x00, 0x02, 0xf2, 0x00, 0x00, 0x49, 0x6c, 0x00, 0x00, 0x03, 0xb1, 0x00, 0x00,
  0x05, 0xb5, 0x00, 0x00, 0x06, 0x9a, 0x00, 0x00, 0x07, 0xa9, 0x00, 0x00, 0x06,
  0x76, 0x00, 0x00, 0x06, 0xa7, 0x00, 0x00, 0x07, 0x6a, 0x00, 0x00, 0x07, 0x76,
  0x00, 0x00, 0x07, 0xd7, 0x00, 0x00, 0x06, 0xb5, 0x00, 0x00, 0x06, 0x7e, 0x00,
  0x00, 0x05, 0xfa, 0x00, 0x00, 0x06, 0x8d, 0x00, 0x00, 0x06, 0x5d, 0x00, 0x00,
  0x05, 0xd0, 0x00, 0x00, 0x06, 0xdb, 0x00, 0x00, 0x06, 0x7e, 0x00, 0x00, 0x06,
  0x30, 0x00, 0x00, 0x06, 0x68, 0x00, 0x00, 0x06, 0xf1, 0x00, 0x00, 0x06, 0x6e,
  0x00, 0x00, 0x06, 0x7f, 0x00, 0x00, 0x06, 0x71, 0x00, 0x00, 0x06, 0x4a, 0x00,
  0x00, 0x06, 0x34, 0x00, 0x00, 0x05, 0x88, 0x00, 0x00, 0x05, 0x36, 0x00, 0x00,
  0x04, 0xea, 0x00, 0x00, 0x04, 0xc6, 0x00, 0x00, 0x04, 0x45, 0x00, 0x00, 0x04,
  0xc1, 0x00, 0x00, 0x02, 0xe1, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x50, 0x84,
  0x00, 0x00, 0x03, 0x0f, 0x00, 0x00, 0x05, 0xe1, 0x00, 0x00, 0x07, 0x28, 0x00,
  0x00, 0x07, 0x87, 0x00, 0x00, 0x08, 0xf4, 0x00, 0x00, 0x08, 0x1a, 0x00, 0x00,
  0x08, 0x55, 0x00, 0x00, 0x09, 0x88, 0x00, 0x00, 0x09, 0x94, 0x00, 0x00, 0x0c,
  0x8c, 0x00, 0x00, 0x0f, 0x6a, 0x00, 0x00, 0x0f, 0x2d, 0x00, 0x00, 0x0f, 0xca,
  0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x0e, 0xaa, 0x00, 0x00, 0x0d, 0x51, 0x00,
  0x00, 0x0e, 0x27, 0x00, 0x00, 0x11, 0x1c, 0x00, 0x00, 0x11, 0x9b, 0x00, 0x00,
  0x12, 0xd2, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x14, 0xd1, 0x00, 0x00, 0x13,
  0x1a, 0x00, 0x00, 0x14, 0xb6, 0x00, 0x00, 0x13, 0x50, 0x00, 0x00, 0x11, 0x19,
  0x00, 0x00, 0x11, 0x57, 0x00, 0x00, 0x0f, 0x53, 0x00, 0x00, 0x0f, 0x6a, 0x00,
  0x00, 0x11, 0x86, 0x00, 0x00, 0x11, 0xc8, 0x00, 0x00, 0x10, 0xa7, 0x00, 0x00,
  0x0f, 0x1a, 0x00, 0x00, 0x0d, 0xec, 0x00, 0x00, 0x0d, 0x44, 0x00, 0x00, 0x0b,
  0xcf, 0x00, 0x00, 0x0c, 0x7f, 0x00, 0x00, 0x0f, 0x86, 0x00, 0x00, 0x0d, 0xc7,
  0x00, 0x00, 0x0d, 0x4d, 0x00, 0x00, 0x11, 0xc5, 0x00, 0x00, 0x10, 0x03, 0x00,
  0x00, 0x0f, 0xd2, 0x00, 0x00, 0x10, 0x9e, 0x00, 0x00, 0x10, 0x6e, 0x00, 0x00,
  0x0f, 0xb0, 0x00, 0x00, 0x0f, 0x84, 0x00, 0x00, 0x0c, 0xca, 0x00, 0x00, 0x09,
  0x23, 0x00, 0x00, 0x06, 0x35, 0x00, 0x00, 0x1d, 0x11, 0x00, 0x00, 0x06, 0xbd,
  0x00, 0x00, 0x07, 0xa5, 0x00, 0x00, 0x08, 0x5a, 0x00, 0x00, 0x07, 0x7d, 0x00,
  0x00, 0x06, 0xb6, 0x00, 0x00, 0x06, 0x69, 0x00, 0x00, 0x04, 0x22, 0x00, 0x00,
  0x04, 0x16, 0x00, 0x00, 0x03, 0xe5, 0x00, 0x00, 0x03, 0x2f, 0x00, 0x00, 0x03,
  0x0b, 0x00, 0x00, 0x03, 0xeb, 0x00, 0x00, 0x03, 0xe2, 0x00, 0x00, 0x03, 0x94,
  0x00, 0x00, 0x02, 0x92, 0x00, 0x00, 0x02, 0xbe, 0x00, 0x00, 0x01, 0xf2, 0x00,
  0x00, 0x02, 0x10, 0x00, 0x00, 0x01, 0xc4, 0x00, 0x00, 0x3e, 0x02, 0x00, 0x00,
  0x02, 0x6b, 0x00, 0x00, 0x01, 0x98, 0x00, 0x00, 0x01, 0xbe, 0x00, 0x00, 0x03,
  0xe7, 0x00, 0x00, 0x03, 0x76, 0x00, 0x00, 0x03, 0x6d, 0x00, 0x00, 0x03, 0xaa,
  0x00, 0x00, 0x03, 0x5a, 0x00, 0x00, 0x03, 0xc2, 0x00, 0x00, 0x03, 0xfd, 0x00,
  0x00, 0x04, 0x3e, 0x00, 0x00, 0x04, 0xfa, 0x00, 0x00, 0x04, 0xad, 0x00, 0x00,
  0x05, 0x22, 0x00, 0x00, 0x04, 0x8f, 0x00, 0x00, 0x05, 0x10, 0x00, 0x00, 0x04,
  0xd6, 0x00, 0x00, 0x05, 0x7e, 0x00, 0x00, 0x06, 0x96, 0x00, 0x00, 0x04, 0xce,
  0x00, 0x00, 0x04, 0x9d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x68, 0x00,
  0x00, 0x04, 0x7e, 0x00, 0x00, 0x04, 0x86, 0x00, 0x00, 0x04, 0xcb, 0x00, 0x00,
  0x04, 0x7c, 0x00, 0x00, 0x03, 0xd2, 0x00, 0x00, 0x04, 0xb8, 0x00, 0x00, 0x03,
  0xf8, 0x00, 0x00, 0x04, 0xca, 0x00, 0x00, 0x04, 0xbb, 0x00, 0x00, 0x04, 0xa0,
  0x00, 0x00, 0x05, 0x6e, 0x00, 0x00, 0x04, 0xa2, 0x00, 0x00, 0x05, 0xb5, 0x00,
  0x00, 0x05, 0x58, 0x00, 0x00, 0x04, 0x5a, 0x00, 0x00, 0x05, 0x46, 0x00, 0x00,
  0x40, 0x2e, 0x00, 0x00, 0x02, 0x0a, 0x00, 0x00, 0x03, 0x7d, 0x00, 0x00, 0x03,
  0xf4, 0x00, 0x00, 0x03, 0xa6, 0x00, 0x00, 0x04, 0x74, 0x00, 0x00, 0x04, 0xb7,
  0x00, 0x00, 0x05, 0x36, 0x00, 0x00, 0x05, 0x3a, 0x00, 0x00, 0x06, 0x8b, 0x00,
  0x00, 0x06, 0x0b, 0x00, 0x00, 0x05, 0xb5, 0x00, 0x00, 0x05, 0xb4, 0x00, 0x00,
  0x04, 0xda, 0x00, 0x00, 0x03, 0xe3, 0x00, 0x00, 0x3f, 0x48, 0x00, 0x00, 0x05,
  0x28, 0x00, 0x00, 0x05, 0x61, 0x00, 0x00, 0x05, 0xe0, 0x00, 0x00, 0x05, 0xa2,
  0x00, 0x00, 0x05, 0xf1, 0x00, 0x00, 0x05, 0xc6, 0x00, 0x00, 0x06, 0x56, 0x00,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x0d, 0x90, 0x00, 0x00, 0x0f, 0x85, 0x00, 0x00,
  0x0f, 0x97, 0x00, 0x00, 0x10, 0xbd, 0x00, 0x00, 0x11, 0x5c, 0x00, 0x00, 0x15,
  0x15, 0x00, 0x00, 0x14, 0xa3, 0x00, 0x00, 0x12, 0x85, 0x00, 0x00, 0x0e, 0xe8,
  0x00, 0x00, 0x10, 0x59, 0x00, 0x00, 0x11, 0xf6, 0x00, 0x00, 0x11, 0x42, 0x00,
  0x00, 0x10, 0x2f, 0x00, 0x00, 0x0d, 0x52, 0x00, 0x00, 0x0d, 0x05, 0x00, 0x00,
  0x0f, 0x07, 0x00, 0x00, 0x0b, 0xbb, 0x00, 0x00, 0x0c, 0x59, 0x00, 0x00, 0x0b,
  0x6f, 0x00, 0x00, 0x0b, 0xf5, 0x00, 0x00, 0x08, 0xec, 0x00, 0x00, 0x08, 0x86,
  0x00, 0x00, 0x07, 0x8b, 0x00, 0x00, 0x07, 0x20, 0x00, 0x00, 0x06, 0x5f, 0x00,
  0x00, 0x06, 0xbb, 0x00, 0x00, 0x06, 0x6c, 0x00, 0x00, 0x05, 0xfe, 0x00, 0x00,
  0x05, 0x20, 0x00, 0x00, 0x03, 0xcd, 0x00, 0x00, 0x04, 0x5b, 0x00, 0x00, 0x02,
  0xfd, 0x00, 0x00, 0xad, 0x37, 0x00, 0x00, 0x01, 0x91, 0x00, 0x00, 0x03, 0x4d,
  0x00, 0x00, 0x03, 0xe1, 0x00, 0x00, 0x05, 0xf8, 0x00, 0x00, 0x04, 0xa3, 0x00,
  0x00, 0x06, 0xe8, 0x00, 0x00, 0x07, 0x62, 0x00, 0x00, 0x06, 0xf3, 0x00, 0x00,
  0x08, 0x47, 0x00, 0x00, 0x0a, 0xb4, 0x00, 0x00, 0x0a, 0xe0, 0x00, 0x00, 0x0b,
  0xf8, 0x00, 0x00, 0x10, 0x0d, 0x00, 0x00, 0x0c, 0x26, 0x00, 0x00, 0x0d, 0x92,
  0x00, 0x00, 0x0d, 0xa8, 0x00, 0x00, 0x0f, 0xf2, 0x00, 0x00, 0x0d, 0xda, 0x00,
  0x00, 0x0f, 0x9a, 0x00, 0x00, 0x0b, 0x77, 0x00, 0x00, 0x0a, 0x3b, 0x00, 0x00,
  0x09, 0xe6, 0x00, 0x00, 0x08, 0xc0, 0x00, 0x00, 0x07, 0x24, 0x00, 0x00, 0x07,
  0xd3, 0x00, 0x00, 0x06, 0x0f, 0x00, 0x00, 0x06, 0x38, 0x00, 0x00, 0x0c, 0x74,
  0x00, 0x00, 0x04, 0x21, 0x00, 0x00, 0x02, 0xbb, 0x00, 0x00, 0x05, 0xa9, 0x00,
  0x00, 0x02, 0xba, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x03, 0x1b, 0x00, 0x00,
  0x03, 0x54, 0x00, 0x00, 0x02, 0x0d, 0x00, 0x00, 0x02, 0xa7, 0x00, 0x00, 0x01,
  0x82, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x01, 0x3c,
  0x00, 0x00, 0x00, 0xce, 0x00, 0x00, 0x00, 0xca, 0x00, 0x00, 0x1c, 0xbc, 0x00,
  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c,
  0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00,
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c,
  0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00,
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 0xbf,
  0x00, 0x00, 0x02, 0x7a, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x0c, 0x00,
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x06, 0xea, 0x00, 0x00, 0x08, 0x76, 0x00, 0x00,
  0x07, 0xbb, 0x00, 0x00, 0x07, 0xb5, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c,
  0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00,
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x1f, 0x67, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x0c,
  0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00,
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c,
  0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x01, 0xa9, 0x00,
  0x00, 0x02, 0x5c, 0x00, 0x00, 0x01, 0xfb, 0x00, 0x00, 0x03, 0x4e, 0x00, 0x00,
  0x02, 0xa8, 0x00, 0x00, 0x06, 0x1c, 0x00, 0x00, 0x03, 0xcf, 0x00, 0x00, 0x08,
  0x33, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x07, 0x5a, 0x00, 0x00, 0x03, 0x10,
  0x00, 0x00, 0x07, 0x93, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x06, 0x5e, 0x00,
  0x00, 0x04, 0xc9, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x01, 0x4d, 0x00, 0x00,
  0x03, 0x82, 0x00, 0x00, 0x02, 0x0f, 0x00, 0x00, 0x03, 0xdb, 0x00, 0x00, 0x02,
  0x0e, 0x00, 0x00, 0x03, 0xc5, 0x00, 0x00, 0x01, 0xf9, 0x00, 0x00, 0x03, 0x90,
  0x00, 0x00, 0x02, 0x56, 0x00, 0x00, 0x03, 0xdd, 0x00, 0x00, 0x03, 0x83, 0x00,
  0x00, 0x02, 0x0e, 0x00, 0x00, 0x03, 0xb4, 0x00, 0x00, 0x01, 0x8d, 0x00, 0x00,
  0x03, 0x1a, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x03, 0xd1, 0x00, 0x00, 0x02,
  0x84, 0x00, 0x00, 0x03, 0x4d, 0x00, 0x00, 0x02, 0x97, 0x00, 0x00, 0x03, 0x02,
  0x00, 0x00, 0x02, 0xa9, 0x00, 0x00, 0x02, 0xf5, 0x00, 0x00, 0x02, 0x46, 0x00,
  0x00, 0x02, 0x81, 0x00, 0x00, 0x01, 0xe6, 0x00, 0x00, 0x11, 0x70, 0x00, 0x00,
  0x00, 0xdb, 0x00, 0x00, 0x03, 0x8d, 0x00, 0x00, 0x07, 0xb2, 0x00, 0x00, 0x07,
  0xa9, 0x00, 0x00, 0x05, 0xd9, 0x00, 0x00, 0x04, 0x4e, 0x00, 0x00, 0x01, 0xde,
  0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00,
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c
};
static const uint32 kTestTableEntries_stsz =
    sizeof(kTestTable_stsz) / kEntrySize_stsz;
static const uint64 kTestTableOffset_stsz = 40000000;

static const uint8 kTestTable_stts[] = {
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x39, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x2a
};
static const uint32 kTestTableEntries_stts =
    sizeof(kTestTable_stts) / kEntrySize_stts;
static const uint64 kTestTableOffset_stts = 50000000;

class ShellMP4MapTest : public testing::Test {
 public:
  // These methods must be public as they are Invoke()d by the mock reader.
  int MockBlockingRead_stco(int64 position, int size, uint8* data) {
    DCHECK_GE(position - 8, kTestTableOffset_stco);
    DCHECK_LE(position - 8 + size,
              kTestTableOffset_stco + sizeof(kTestTable_stco));
    uint32 offset = position - kTestTableOffset_stco - 8;
    memcpy(data, kTestTable_stco + offset, size);
    return size;
  }

  int MockBlockingRead_stsc(int64 position, int size, uint8* data) {
    DCHECK_GE(position - 8, kTestTableOffset_stsc);
    DCHECK_LE(position - 8 + size,
              kTestTableOffset_stsc + sizeof(kTestTable_stsc));
    uint32 offset = position - kTestTableOffset_stsc - 8;
    memcpy(data, kTestTable_stsc + offset, size);
    return size;
  }

  int MockBlockingRead_stss(int64 position, int size, uint8* data) {
    DCHECK_GE(position - 8, kTestTableOffset_stss);
    DCHECK_LE(position - 8 + size,
              kTestTableOffset_stss + sizeof(kTestTable_stss));
    uint32 offset = position - kTestTableOffset_stss - 8;
    memcpy(data, kTestTable_stss + offset, size);
    return size;
  }

  int MockBlockingRead_stsz(int64 position, int size, uint8* data) {
    // in-bounds only checks, please, bad bounds on the map should be failed
    // expectations on the reader, not bad calls to this functions
    DCHECK_GE(position - 12, kTestTableOffset_stsz);
    DCHECK_LE(position - 12 + size,
              kTestTableOffset_stsz + sizeof(kTestTable_stsz));
    uint32 offset = position - kTestTableOffset_stsz - 12;
    memcpy(data, kTestTable_stsz + offset, size);
    return size;
  }

  int MockBlockingRead_stts(int64 position, int size, uint8* data) {
    DCHECK_GE(position - 8, kTestTableOffset_stts);
    DCHECK_LE(position - 8 + size,
              kTestTableOffset_stts + sizeof(kTestTable_stts));
    uint32 offset = position - kTestTableOffset_stts - 8;
    memcpy(data, kTestTable_stts + offset, size);
    return size;
  }

 protected:
  ShellMP4MapTest() {
    // we create and destroy buffer factory after each test to detect any
    // leaked reference-counted objects or pending callbacks
    ShellBufferFactory::Initialize();
    // make a new mock reader
    reader_ = new ::testing::NiceMock<MockShellDataSourceReader>();
    filter_graph_log_ = new ::testing::NiceMock<MockShellFilterGraphLog>();
    // make a new map with a mock reader.
    map_ = new ShellMP4Map(reader_, filter_graph_log_);
  }

  virtual ~ShellMP4MapTest() {
    // wipe out the map or ShellBufferFactory may complain of unfreed allocs
    map_ = NULL;
    ShellBufferFactory::Terminate();
  }

  // convenience methods to configure the mock reader to return good defaults
  // for given tables
  void SetDefaultBlockingReads_stco() {
    ON_CALL(*reader_, BlockingRead(AllOf(Ge(kTestTableOffset_stco + 8),
                                         Lt(kTestTableOffset_stco + 8 +
                                            sizeof(kTestTable_stco))), _, _))
        .WillByDefault(Invoke(this, &ShellMP4MapTest::MockBlockingRead_stco));
  }

  void SetDefaultBlockingReads_stsc() {
    ON_CALL(*reader_, BlockingRead(AllOf(Ge(kTestTableOffset_stsc + 8),
                                         Lt(kTestTableOffset_stsc + 8 +
                                            sizeof(kTestTable_stsc))), _, _))
        .WillByDefault(Invoke(this, &ShellMP4MapTest::MockBlockingRead_stsc));
  }

  void SetDefaultBlockingReads_stss() {
    ON_CALL(*reader_, BlockingRead(AllOf(Ge(kTestTableOffset_stss + 8),
                                         Lt(kTestTableOffset_stss + 8 +
                                            sizeof(kTestTable_stss))), _, _))
        .WillByDefault(Invoke(this, &ShellMP4MapTest::MockBlockingRead_stss));
  }

  void SetDefaultBlockingReads_stsz() {
    ON_CALL(*reader_, BlockingRead(AllOf(Ge(kTestTableOffset_stsz + 12),
                                         Lt(kTestTableOffset_stsz + 12 +
                                            sizeof(kTestTable_stsz))), _, _))
        .WillByDefault(Invoke(this, &ShellMP4MapTest::MockBlockingRead_stsz));
  }

  void SetDefaultBlockingReads_stts() {
    ON_CALL(*reader_, BlockingRead(AllOf(Ge(kTestTableOffset_stts + 8),
                                         Lt(kTestTableOffset_stts + 8 +
                                            sizeof(kTestTable_stts))), _, _))
        .WillByDefault(Invoke(this, &ShellMP4MapTest::MockBlockingRead_stts));
  }

  void SetTestTable_stco(uint32 cache_size_entries) {
    SetTestTable(kAtomType_stco,
                 cache_size_entries,
                 kEntrySize_stco,
                 kTestTableEntries_stco,
                 sizeof(kTestTable_stco),
                 kTestTable_stco,
                 kTestTableOffset_stco);
  }

  void SetTestTable_stsc(uint32 cache_size_entries) {
    SetTestTable(kAtomType_stsc,
                 cache_size_entries,
                 kEntrySize_stsc,
                 kTestTableEntries_stsc,
                 sizeof(kTestTable_stsc),
                 kTestTable_stsc,
                 kTestTableOffset_stsc);
  }

  void SetTestTable_stss(uint32 cache_size_entries) {
    SetTestTable(kAtomType_stss,
                 cache_size_entries,
                 kEntrySize_stss,
                 kTestTableEntries_stss,
                 sizeof(kTestTable_stss),
                 kTestTable_stss,
                 kTestTableOffset_stss);
  }

  void SetTestTable_stts(uint32 cache_size_entries) {
    SetTestTable(kAtomType_stts,
                 cache_size_entries,
                 kEntrySize_stts,
                 kTestTableEntries_stts,
                 sizeof(kTestTable_stts),
                 kTestTable_stts,
                 kTestTableOffset_stts);
  }

  // calls map_->SetAtom() with correct expectations on the reader and a
  // parameterized cache size
  void SetTestTable(uint32 four_cc,
                    uint32 cache_size_entries,
                    uint32 entry_size_bytes,
                    uint32 number_of_entries,
                    uint32 table_size_bytes,
                    const uint8* table_data,
                    uint64 table_fake_offset) {
    DCHECK_NE(four_cc, kAtomType_stsz) <<
        "use the SetTestTable_stsz() method for stsz atoms!";
    // header to supply to SetAtom()
    uint8 atom_header[] = {
      0x00,                   // 1 byte version
      0x00, 0x00, 0x00,       // 3 bytes flags
      0x00, 0x00, 0x00, 0x00  // table entry count, set below
    };
    LB::Platform::store_uint32_big_endian(number_of_entries,
                                          atom_header + 4);
    // map should load smaller of first cache segment of table, or entire table
    uint32 load_size = std::min(cache_size_entries * entry_size_bytes,
                                table_size_bytes);
    EXPECT_CALL(*reader_,
        BlockingRead(table_fake_offset + 8, load_size, _))
        .WillOnce(DoAll(SetArrayArgument<2>(table_data,
                                            table_data + load_size),
                        Return(load_size)))
        .RetiresOnSaturation();
    map_->SetAtom(four_cc,
                  table_fake_offset,
                  table_size_bytes + 8,
                  cache_size_entries,
                  atom_header);
  }

  // sets the static test stsz atom into the mock. stsz has a unique header
  // structure so gets its own method.
  void SetTestTable_stsz(uint32 cache_size_entries) {
    // header to supply to SetAtom()
    uint8 stsz_header[] = {
      0x00,                    // 1 byte version
      0x00, 0x00, 0x00,        // 3 bytes flags
      0x00, 0x00, 0x00, 0x00,  // 4 bytes of default size, must be zero
      0x00, 0x00, 0x00, 0x00   // table count, set to uint32 big-endian
    };
    // store table size in header
    LB::Platform::store_uint32_big_endian(kTestTableEntries_stsz,
                                          stsz_header + 8);
    // map should load smaller of first cache segment of table, or entire table
    uint32 load_size = std::min<uint32>(cache_size_entries * kEntrySize_stsz,
                                        sizeof(kTestTable_stsz));
    // Set expectations on reader, we expect it will load the first cache
    // segment of the atom. We retire this expectation once it is met so that
    // it does not complicate our test code.
    EXPECT_CALL(*reader_,
        BlockingRead(kTestTableOffset_stsz + 12, load_size, _))
        .WillOnce(DoAll(SetArrayArgument<2>(kTestTable_stsz,
                                            kTestTable_stsz + load_size),
                        Return(load_size)))
        .RetiresOnSaturation();

    map_->SetAtom(kAtomType_stsz,
                  kTestTableOffset_stsz,
                  sizeof(kTestTable_stsz) + 12,
                  cache_size_entries,
                  stsz_header);
  }

  // Call either this method or SetTestTable_stsz but not both. Note that
  // sending a 0 default size violates mp4 standard (but should be tested!)
  void SetDefaultSize_stsz(uint32 default_size) {
    uint8 stsz_header[] = {
      0x00,                      // 1 byte version
      0x00, 0x00, 0x00,          // 3 bytes of flags
      0x00, 0x00, 0x00, 0x00,    // non-zero default size
      0x00, 0x00, 0x00, 0x00 };  // table count, set to zero
    // save default size to header
    LB::Platform::store_uint32_big_endian(default_size, stsz_header + 4);
    // expect no calls to reader_ ever..
    map_->SetAtom(kAtomType_stsz,
                  kTestTableOffset_stsz,
                  12,
                  0,
                  stsz_header);
  }

  // Simple lookup on the test stsz table
  uint32 GetTestSampleSize(uint32 sample_number) {
    DCHECK_LT(sample_number, kTestTableEntries_stsz);
    return LB::Platform::load_uint32_big_endian(
        kTestTable_stsz + (kEntrySize_stsz * sample_number));
  }

  // Calculates the offset for the sample in the clearest (and slowest) way
  // possible, by integrating through the stsc table to find the chunk number
  // for the given sample and the first sample number in that chunk,
  // looking up that chunk offset in stco, and adding sample sizes from stsz
  // to find the total final offset. If default_sample_size is nonzero then it
  // will use the default size to calculate the offset instead of the stsz
  uint64 GetTestSampleOffset(uint32 sample_number,
                             uint32 default_sample_size = 0) {
    uint32 first_chunk = 0;
    uint32 first_chunk_sample_number = 0;
    uint32 samples_per_chunk =
        LB::Platform::load_uint32_big_endian(kTestTable_stsc + 4);
    // We start counting chunks from 0, this table counts them from 1.
    uint32 next_first_chunk =
        LB::Platform::load_uint32_big_endian(
        kTestTable_stsc + kEntrySize_stsc) - 1;
    // sum samples until we find right sample number
    for (int i = 1; i < kTestTableEntries_stsc; i++) {
      uint32 samples_in_chunk_range =
          (next_first_chunk - first_chunk) * samples_per_chunk;
      if (first_chunk_sample_number + samples_in_chunk_range > sample_number) {
        break;
      }
      // move to next chunk range
      first_chunk_sample_number += samples_in_chunk_range;
      first_chunk = next_first_chunk;
      // load samples per chunk in this range
      samples_per_chunk = LB::Platform::load_uint32_big_endian(
          kTestTable_stsc + (kEntrySize_stsc * i) + 4);
      // are we at the end of the table?
      if (i < kTestTableEntries_stsc - 1) {
        // if not load start of next range
        next_first_chunk = LB::Platform::load_uint32_big_endian(
            kTestTable_stsc + (kEntrySize_stsc * (i + 1))) - 1;
      } else {
        // we just loaded the last samples_per_chunk, and loaded the
        // first_chunk as next_first_chunk on prior iteration. We're good.
        break;
      }
    }
    DCHECK_LE(first_chunk_sample_number, sample_number);
    uint32 chunk_number = first_chunk +
        ((sample_number - first_chunk_sample_number) / samples_per_chunk);
    uint32 first_sample_in_this_chunk = first_chunk_sample_number +
        ((chunk_number - first_chunk) * samples_per_chunk);
    // look up chunk offset in stco
    DCHECK_LT(chunk_number, kTestTableEntries_stco);
    uint32 chunk_offset = LB::Platform::load_uint32_big_endian(
        kTestTable_stco + (chunk_number * kEntrySize_stco));
    // add sample sizes within that chunk until we arrive at total sample offset
    uint64 sample_offset = chunk_offset;
    if (default_sample_size > 0) {
      sample_offset += (sample_number - first_sample_in_this_chunk) *
                       default_sample_size;
    } else {
      for (int i = first_sample_in_this_chunk; i < sample_number; i++) {
        sample_offset += GetTestSampleSize(i);
      }
    }
    return sample_offset;
  }

  // We need to sum sample counts in the stts to arrive at the desired duration
  uint32 GetTestSampleDuration(uint32 sample_number) {
    uint32 first_sample = 0;
    uint32 next_first_sample = 0;
    uint32 sample_duration = 0;
    for (int i = 0; i < kTestTableEntries_stts; i++) {
      if (next_first_sample > sample_number) {
        break;
      }
      first_sample = next_first_sample;
      uint32 samples_count = LB::Platform::load_uint32_big_endian(
          kTestTable_stts + (i * kEntrySize_stts));
      next_first_sample = first_sample + samples_count;
      sample_duration = LB::Platform::load_uint32_big_endian(
          kTestTable_stts + (i * kEntrySize_stts) + 4);
    }
    return sample_duration;
  }

  // Sum test durations from the stts from 0 to sample number and return.
  uint64 GetTestSamplePTS(uint32 sample_number) {
    uint64 pts = 0;
    uint32 first_sample = 0;
    uint32 next_first_sample = 0;
    uint32 sample_duration = 0;
    for (int i = 0; i < kTestTableEntries_stts; i++) {
      if (next_first_sample > sample_number) {
        break;
      }
      pts += (next_first_sample - first_sample) * sample_duration;
      first_sample = next_first_sample;
      uint32 samples_count = LB::Platform::load_uint32_big_endian(
          kTestTable_stts + (i * kEntrySize_stts));
      next_first_sample = first_sample + samples_count;
      sample_duration = LB::Platform::load_uint32_big_endian(
          kTestTable_stts + (i * kEntrySize_stts) + 4);
    }
    pts += (sample_number - first_sample) * sample_duration;
    return pts;
  }

  uint32 GetTestSampleCTS(uint32 sample_number) {
    NOTIMPLEMENTED();
    return 0;
  }

  // ==== Test Fixture Members
  scoped_refptr<ShellMP4Map> map_;
  scoped_refptr<MockShellDataSourceReader> reader_;
  scoped_refptr<MockShellFilterGraphLog> filter_graph_log_;
};

// ==== SetAtom() Tests ========================================================

TEST_F(ShellMP4MapTest, SetAtomWithZeroDefaultSize) {
  // SetAtom() should fail with a zero default size on an stsc.
  NOTIMPLEMENTED();
}

// ==== GetSize() Tests ========================================================

TEST_F(ShellMP4MapTest, GetSizeWithDefaultSize) {
  SetDefaultSize_stsz(0x0000feed);
  // calls even out of sample size range should return default value
  uint32 returned_size;
  ASSERT_TRUE(map_->GetSize(0, returned_size));
  ASSERT_EQ(returned_size, 0x0000feed);
  ASSERT_TRUE(map_->GetSize(kTestTableEntries_stsz + 100, returned_size));
  ASSERT_EQ(returned_size, 0x0000feed);
  ASSERT_TRUE(map_->GetSize(2, returned_size));
  ASSERT_EQ(returned_size, 0x0000feed);
  ASSERT_TRUE(map_->GetSize(120, returned_size));
  ASSERT_EQ(returned_size, 0x0000feed);
}

// Tests normal iteration through the stsz table. We use the mock reader to
// generate a stsz table where each entry in the table is the sample number + 1,
// so the 0th entry is size 1, 1st entry is size 2, etc.
TEST_F(ShellMP4MapTest, GetSizeIterationHugeCache) {
  // initialize table with cache much larger than actual table size
  SetTestTable_stsz(2 * kTestTableEntries_stsz);
  // iterate through entire table, check each value, expecting reader_ calls
  for (uint32 i = 0; i < kTestTableEntries_stsz; i++) {
    uint32 map_reported_size = 0;
    ASSERT_TRUE(map_->GetSize(i, map_reported_size));
    uint32 table_size = GetTestSampleSize(i);
    // reported size should match table size
    ASSERT_EQ(map_reported_size, table_size);
  }

  // call to a sample past the size of the table should fail
  uint32 failed_size = 0;
  ASSERT_FALSE(map_->GetSize(kTestTableEntries_stsz, failed_size));
}

TEST_F(ShellMP4MapTest, GetSizeIterationTinyCache) {
  SetTestTable_stsz(5);
  // iterate through entire table, setting expectations when we should load
  // an additional cache entry
  uint32 cache_entry_number = 0;
  for (uint32 i = 0; i < kTestTableEntries_stsz; i++) {
    // see if we need to expect loading a new cache entry
    if ((i / 5) > cache_entry_number) {
      cache_entry_number = i / 5;
      uint32 load_size = std::min(
          (uint32)(5 * kEntrySize_stsz),
          (kTestTableEntries_stsz - i) * kEntrySize_stsz);
      EXPECT_CALL(*reader_,
          BlockingRead(kTestTableOffset_stsz + 12 + (cache_entry_number * 20),
                       load_size, _))
          .WillOnce(DoAll(SetArrayArgument<2>(
              kTestTable_stsz + (cache_entry_number * 20),
              kTestTable_stsz + (cache_entry_number * 20) + load_size),
                    Return(load_size)));
    }
    uint32 map_reported_size = 0;
    ASSERT_TRUE(map_->GetSize(i, map_reported_size));
    uint32 table_size = GetTestSampleSize(i);
    ASSERT_EQ(map_reported_size, table_size);
  }
  // call to sample past the table size should still faile
  uint32 failed_size = 0;
  ASSERT_FALSE(map_->GetSize(kTestTableEntries_stsz + 5, failed_size));
}

TEST_F(ShellMP4MapTest, GetSizeRandomAccess) {
  SetTestTable_stsz(25);
  // test first sample query somewhere later in the table, sample 105
  EXPECT_CALL(*reader_,
      BlockingRead(kTestTableOffset_stsz + 12 + (100 * kEntrySize_stsz),
                   25 * kEntrySize_stsz, _))
      .WillOnce(DoAll(SetArrayArgument<2>(
                          kTestTable_stsz + (100 * kEntrySize_stsz),
                          kTestTable_stsz + (125 * kEntrySize_stsz)),
                      Return(25 * kEntrySize_stsz)));
  uint32 map_reported_size = 0;
  ASSERT_TRUE(map_->GetSize(105, map_reported_size));
  uint32 table_size = GetTestSampleSize(105);
  ASSERT_EQ(map_reported_size, table_size);

  // now jump back to sample 0
  EXPECT_CALL(*reader_,
      BlockingRead(kTestTableOffset_stsz + 12, 25 * kEntrySize_stsz, _))
      .WillOnce(DoAll(SetArrayArgument<2>(
                          kTestTable_stsz,
                          kTestTable_stsz + (25 * kEntrySize_stsz)),
                      Return(25 * kEntrySize_stsz)));
  ASSERT_TRUE(map_->GetSize(0, map_reported_size));
  table_size = GetTestSampleSize(0);
  ASSERT_EQ(map_reported_size, table_size);

  // now seek well past the end, this query should fail but not break subsequent
  // queries or issue a recache
  ASSERT_FALSE(map_->GetSize(kTestTableEntries_stsz * 1000, map_reported_size));

  // a query back within the first table should not cause recache
  ASSERT_TRUE(map_->GetSize(10, map_reported_size));
  table_size = GetTestSampleSize(10);
  ASSERT_EQ(map_reported_size, table_size);

  // check sample queries right on cache boundaries out-of-order
  EXPECT_CALL(*reader_,
      BlockingRead(kTestTableOffset_stsz + 12 + (50 * kEntrySize_stsz),
                   25 * kEntrySize_stsz, _))
      .WillOnce(DoAll(SetArrayArgument<2>(
                          kTestTable_stsz + (50 * kEntrySize_stsz),
                          kTestTable_stsz + (75 * kEntrySize_stsz)),
                      Return(25 * kEntrySize_stsz)));
  ASSERT_TRUE(map_->GetSize(50, map_reported_size));
  table_size = GetTestSampleSize(50);
  ASSERT_EQ(map_reported_size, table_size);
  EXPECT_CALL(*reader_,
      BlockingRead(kTestTableOffset_stsz + 12 + (25 * kEntrySize_stsz),
                   25 * kEntrySize_stsz, _))
      .WillOnce(DoAll(SetArrayArgument<2>(
                          kTestTable_stsz + (25 * kEntrySize_stsz),
                          kTestTable_stsz + (50 * kEntrySize_stsz)),
                      Return(25 * kEntrySize_stsz)));
  ASSERT_TRUE(map_->GetSize(49, map_reported_size));
  table_size = GetTestSampleSize(49);
  ASSERT_EQ(map_reported_size, table_size);
}

// ==== GetOffset() Tests ======================================================

TEST_F(ShellMP4MapTest, GetOffsetIterationHugeCache) {
  SetTestTable_stsz(kTestTableEntries_stsz);
  SetTestTable_stsc(kTestTableEntries_stsc);
  SetTestTable_stco(kTestTableEntries_stco);

  // no expectations on reader_, all tables should now be in memory
  for (uint32 i = 0; i < kTestTableEntries_stsz; i++) {
    uint64 map_reported_offset = 0;
    ASSERT_TRUE(map_->GetOffset(i, map_reported_offset));
    uint64 table_offset = GetTestSampleOffset(i);
    ASSERT_EQ(map_reported_offset, table_offset);
  }

  // calls to sample numbers outside file range should fail non-fatally
  uint64 failed_offset;
  ASSERT_FALSE(map_->GetOffset(kTestTableEntries_stsz, failed_offset));
}

TEST_F(ShellMP4MapTest, GetOffsetIterationTinyCache) {
  // set up permissive expecations on reader for all in-bound table queries
  SetDefaultBlockingReads_stco();
  SetDefaultBlockingReads_stsc();
  SetDefaultBlockingReads_stsz();
  EXPECT_CALL(*reader_, BlockingRead(_, _, _)).Times(AnyNumber());

  // load the tables into the map
  SetTestTable_stco(1);
  SetTestTable_stsc(1);
  SetTestTable_stsz(1);

  // iterate through all samples in range
  for (uint32 i = 0; i < kTestTableEntries_stsz; i += 2) {
    uint64 map_reported_offset = 0;
    ASSERT_TRUE(map_->GetOffset(i, map_reported_offset));
    uint64 table_offset = GetTestSampleOffset(i);
    ASSERT_EQ(map_reported_offset, table_offset);
  }

  // calls to sample numbers outside file range should fail non-fatally
  uint64 failed_offset;
  ASSERT_FALSE(map_->GetOffset(kTestTableEntries_stsz, failed_offset));
}

// Random access within cache should just result in correct re-integration
// through the stsc.
TEST_F(ShellMP4MapTest, GetOffsetRandomAccessHugeCache) {
  SetTestTable_stsz(kTestTableEntries_stsz);
  SetTestTable_stsc(kTestTableEntries_stsc);
  SetTestTable_stco(kTestTableEntries_stco);

  // pick a number just shy of a new samples-per-chunk range
  uint32 sample_number = kComputedFirstSamples_stsc[5] - 1;
  uint64 map_reported_offset = 0;
  ASSERT_TRUE(map_->GetOffset(sample_number, map_reported_offset));
  uint64 table_offset = GetTestSampleOffset(sample_number);
  ASSERT_EQ(map_reported_offset, table_offset);

  // jump to the last sample
  sample_number = kTestTableEntries_stsz - 1;
  ASSERT_TRUE(map_->GetOffset(sample_number, map_reported_offset));
  table_offset = GetTestSampleOffset(sample_number);
  ASSERT_EQ(map_reported_offset, table_offset);

  // and now a sample just a few chunks in to the first sample range
  sample_number = 24;
  ASSERT_TRUE(map_->GetOffset(sample_number, map_reported_offset));
  table_offset = GetTestSampleOffset(sample_number);
  ASSERT_EQ(map_reported_offset, table_offset);
}

// Random access across cache boundaries should not break computation of
// offsets.
TEST_F(ShellMP4MapTest, GetOffsetRandomAccessTinyCache) {
  SetDefaultBlockingReads_stco();
  SetDefaultBlockingReads_stsc();
  SetDefaultBlockingReads_stsz();
  EXPECT_CALL(*reader_, BlockingRead(_, _, _)).Times(AnyNumber());

  // load the tables into the map
  SetTestTable_stsz(1);
  SetTestTable_stco(1);
  SetTestTable_stsc(1);

  // calls to sample numbers outside file range should fail non-fatally
  uint64 failed_offset;
  ASSERT_FALSE(map_->GetOffset(kTestTableEntries_stsz, failed_offset));

  // first sample number in last samples-per-chunk range
  uint32 sample_number = kComputedFirstSamples_stsc[7];
  uint64 map_reported_offset = 0;
  ASSERT_TRUE(map_->GetOffset(sample_number, map_reported_offset));
  uint64 table_offset = GetTestSampleOffset(sample_number);
  ASSERT_EQ(map_reported_offset, table_offset);

  // the sample right before it in the last sample range
  sample_number--;
  ASSERT_TRUE(map_->GetOffset(sample_number, map_reported_offset));
  table_offset = GetTestSampleOffset(sample_number);
  ASSERT_EQ(map_reported_offset, table_offset);

  // second sample in the file
  sample_number = 1;
  ASSERT_TRUE(map_->GetOffset(sample_number, map_reported_offset));
  table_offset = GetTestSampleOffset(sample_number);
  ASSERT_EQ(map_reported_offset, table_offset);

  // now iterate through a few samples in the middle
  sample_number = kComputedFirstSamples_stsc[3] - 2;
  for (int i = 0; i < 200; i++) {
    ASSERT_TRUE(map_->GetOffset(sample_number + i, map_reported_offset));
    table_offset = GetTestSampleOffset(sample_number + i);
    ASSERT_EQ(map_reported_offset, table_offset);
  }

  // now iterate backwards from the same starting point
  for (int i = 0; i < 200; i++) {
    ASSERT_TRUE(map_->GetOffset(sample_number - i, map_reported_offset));
    table_offset = GetTestSampleOffset(sample_number - i);
    ASSERT_EQ(map_reported_offset, table_offset);
  }
}

TEST_F(ShellMP4MapTest, GetOffsetRandomAccessWithDefaultSize) {
  SetDefaultBlockingReads_stco();
  SetDefaultBlockingReads_stsc();
  EXPECT_CALL(*reader_, BlockingRead(_, _, _)).Times(AnyNumber());

  // Load stco and stsc but provide default size for stsz.
  SetDefaultSize_stsz(14);
  SetTestTable_stco(5);
  SetTestTable_stsc(3);

  // Calculating offset of an out-of-range sample should still return an error.
  uint64 map_reported_offset = 0;
  ASSERT_FALSE(map_->GetOffset(kTestTableEntries_stsz + 2,
                               map_reported_offset));

  // First sample in file should still work, though.
  ASSERT_TRUE(map_->GetOffset(0, map_reported_offset));
  uint64 table_offset = GetTestSampleOffset(0, 14);
  ASSERT_EQ(map_reported_offset, table_offset);

  // Last sample should also work.
  ASSERT_TRUE(map_->GetOffset(kTestTableEntries_stsz - 1, map_reported_offset));
  table_offset = GetTestSampleOffset(kTestTableEntries_stsz - 1, 14);
  ASSERT_EQ(map_reported_offset, table_offset);

  // Skip by 3 through the file a few times
  for (int i = 0; i < kTestTableEntries_stsz; i++) {
    int sample_index = (i * 3) % kTestTableEntries_stsz;
    ASSERT_TRUE(map_->GetOffset(sample_index, map_reported_offset));
    table_offset = GetTestSampleOffset(sample_index, 14);
    ASSERT_EQ(map_reported_offset, table_offset);
  }
}

TEST_F(ShellMP4MapTest, GetOffsetIterationWith64BitOffsets) {
  NOTIMPLEMENTED();
}

TEST_F(ShellMP4MapTest, GetOffsetIterationWith32BitOffsets) {
  NOTIMPLEMENTED();
}

// ==== GetDuration() Tests ====================================================

TEST_F(ShellMP4MapTest, GetDurationIteration) {
  SetDefaultBlockingReads_stts();
  EXPECT_CALL(*reader_, BlockingRead(_, _, _)).Times(AnyNumber());

  SetTestTable_stts(2);

  for (uint32 i = 0; i < kTestTableEntries_stsz; i++) {
    uint32 map_reported_duration = 0;
    ASSERT_TRUE(map_->GetDuration(i, map_reported_duration));
    uint32 table_duration = GetTestSampleDuration(i);
    ASSERT_EQ(map_reported_duration, table_duration);
  }

  // entries past end of table should fail
  uint32 failed_duration = 0;
  ASSERT_FALSE(map_->GetDuration(kTestTableEntries_stsz, failed_duration));
}

TEST_F(ShellMP4MapTest, GetDurationRandomAccess) {
  SetDefaultBlockingReads_stts();
  EXPECT_CALL(*reader_, BlockingRead(_, _, _)).Times(AnyNumber());

  SetTestTable_stts(3);

  // first sample in table
  uint32 map_reported_duration = 0;
  ASSERT_TRUE(map_->GetDuration(0, map_reported_duration));
  uint32 table_duration = GetTestSampleDuration(0);
  ASSERT_EQ(map_reported_duration, table_duration);

  // last sample in table
  ASSERT_TRUE(map_->GetDuration(kTestTableEntries_stsz - 1,
                                map_reported_duration));
  table_duration = GetTestSampleDuration(kTestTableEntries_stsz - 1);
  ASSERT_EQ(map_reported_duration, table_duration);

  // sample just past end should fail
  ASSERT_FALSE(map_->GetDuration(kTestTableEntries_stsz,
                                 map_reported_duration));

  // but shouldn't break other sample lookups
  ASSERT_TRUE(map_->GetDuration(2, map_reported_duration));
  table_duration = GetTestSampleDuration(2);
  ASSERT_EQ(map_reported_duration, table_duration);

  // now iterate backwards through entire table back to first sample
  for (int i = kTestTableEntries_stsz - 1; i >= 1; i--) {
    ASSERT_TRUE(map_->GetDuration(i, map_reported_duration));
    table_duration = GetTestSampleDuration(i);
    ASSERT_EQ(map_reported_duration, table_duration);
  }
}

// ==== GetTimestamp() Tests ===================================================

TEST_F(ShellMP4MapTest, GetTimestampIterationNoCompositionTime) {
  SetDefaultBlockingReads_stts();
  EXPECT_CALL(*reader_, BlockingRead(_, _, _)).Times(AnyNumber());
  SetTestTable_stts(7);

  for (uint32 i = 0; i < kTestTableEntries_stsz; i++) {
    uint64 map_reported_timestamp = 0;
    ASSERT_TRUE(map_->GetTimestamp(i, map_reported_timestamp));
    uint64 table_timestamp = GetTestSamplePTS(i);
    ASSERT_EQ(map_reported_timestamp, table_timestamp);
  }

  // entries past end of table should fail
  uint64 failed_timestamp = 0;
  ASSERT_FALSE(map_->GetTimestamp(kTestTableEntries_stsz, failed_timestamp));
}

TEST_F(ShellMP4MapTest, GetTimestampRandomAccessNoCompositionTime) {
  SetDefaultBlockingReads_stts();
  EXPECT_CALL(*reader_, BlockingRead(_, _, _)).Times(AnyNumber());
  SetTestTable_stts(13);

  // skip by sevens through the file, seven times
  for (int i = 0; i < kTestTableEntries_stsz; i++) {
    uint32 sample_number = (i * 7) % kTestTableEntries_stsz;
    uint64 map_reported_timestamp = 0;
    ASSERT_TRUE(map_->GetTimestamp(sample_number, map_reported_timestamp));
    uint64 table_timestamp = GetTestSamplePTS(sample_number);
    ASSERT_EQ(map_reported_timestamp, table_timestamp);
  }

  // check a failed entry
  uint64 failed_timestamp = 0;
  ASSERT_FALSE(map_->GetTimestamp(kTestTableEntries_stsz * 2,
                                  failed_timestamp));

  // should still be able to recover with valid input, this time skip by 21s
  // backward through the file 21 times
  for (int i = kTestTableEntries_stsz - 1; i >= 0; i--) {
    uint32 sample_number = (i * 21) % kTestTableEntries_stsz;
    uint64 map_reported_timestamp = 0;
    ASSERT_TRUE(map_->GetTimestamp(sample_number, map_reported_timestamp));
    uint64 table_timestamp = GetTestSamplePTS(sample_number);
    ASSERT_EQ(map_reported_timestamp, table_timestamp);
  }
}

TEST_F(ShellMP4MapTest, GetTimestampIteration) {
  // map should use ctts correctly
  NOTIMPLEMENTED();
}

TEST_F(ShellMP4MapTest, GetTimestampRandomAccess) {
  // map should use ctts correctly
  NOTIMPLEMENTED();
}

// ==== GetIsKeyframe() Tests ==================================================

// the map should consider every valid sample number a keyframe without an stss
TEST_F(ShellMP4MapTest, GetIsKeyframeNoKeyframeTable) {
  bool is_keyframe_out = false;
  ASSERT_TRUE(map_->GetIsKeyframe(100, is_keyframe_out));
  ASSERT_TRUE(is_keyframe_out);

  is_keyframe_out = false;
  ASSERT_TRUE(map_->GetIsKeyframe(5, is_keyframe_out));
  ASSERT_TRUE(is_keyframe_out);

  for (int i = 17; i < 174; i += 3) {
    is_keyframe_out = false;
    ASSERT_TRUE(map_->GetIsKeyframe(i, is_keyframe_out));
    ASSERT_TRUE(is_keyframe_out);
  }
}

TEST_F(ShellMP4MapTest, GetIsKeyframeIteration) {
  SetDefaultBlockingReads_stss();
  EXPECT_CALL(*reader_, BlockingRead(_, _, _)).Times(AnyNumber());
  SetTestTable_stss(7);

  int keyframe_table_index = 0;
  uint32 next_keyframe = kComputedKeyframes_stss[0];
  for (uint32 i = 0; i < kTestTableEntries_stsz; ++i) {
    bool map_is_keyframe_out = false;
    ASSERT_TRUE(map_->GetIsKeyframe(i, map_is_keyframe_out));
    bool is_really_keyframe = false;
    if (i == next_keyframe) {
      is_really_keyframe = true;
      keyframe_table_index++;
      if (keyframe_table_index < kTestTableEntries_stss) {
        next_keyframe = kComputedKeyframes_stss[keyframe_table_index];
      } else {
        next_keyframe = UINT32_MAX;
      }
    }
    ASSERT_EQ(map_is_keyframe_out, is_really_keyframe);
  }
  // should have reached end of keyframe list
  ASSERT_EQ(keyframe_table_index, kTestTableEntries_stss);
}

TEST_F(ShellMP4MapTest, GetIsKeyframeRandomAccess) {
  SetDefaultBlockingReads_stss();
  EXPECT_CALL(*reader_, BlockingRead(_, _, _)).Times(AnyNumber());
  SetTestTable_stss(3);

  // pick a keyframe about halfway
  uint32 sample_number = kComputedKeyframes_stss[kTestTableEntries_stss / 2];
  // sample one past it should not be a keyframe
  bool map_is_keyframe_out = false;
  ASSERT_TRUE(map_->GetIsKeyframe(sample_number + 1, map_is_keyframe_out));
  ASSERT_FALSE(map_is_keyframe_out);
  // sample one before keyframe should not be a keyframe either
  ASSERT_TRUE(map_->GetIsKeyframe(sample_number - 1, map_is_keyframe_out));
  ASSERT_FALSE(map_is_keyframe_out);
  // however it should be a keyframe
  ASSERT_TRUE(map_->GetIsKeyframe(sample_number, map_is_keyframe_out));
  ASSERT_TRUE(map_is_keyframe_out);

  // first keyframe
  sample_number = kComputedKeyframes_stss[0];
  // next sample should not be a keyframe
  ASSERT_TRUE(map_->GetIsKeyframe(sample_number + 1, map_is_keyframe_out));
  ASSERT_FALSE(map_is_keyframe_out);
  // but it should be
  ASSERT_TRUE(map_->GetIsKeyframe(sample_number, map_is_keyframe_out));
  ASSERT_TRUE(map_is_keyframe_out);

  // build set of known keyframes for simplicity of membership testing
  std::set<uint32> known_keyframes;
  for (int i = 0; i < kTestTableEntries_stss; ++i) {
    known_keyframes.insert(kComputedKeyframes_stss[i]);
  }

  // iterate backwards from end of file to beginning
  for (int i = kTestTableEntries_stsz - 1; i >= 0; --i) {
    ASSERT_TRUE(map_->GetIsKeyframe(i, map_is_keyframe_out));
    if (known_keyframes.find(i) != known_keyframes.end()) {
      ASSERT_TRUE(map_is_keyframe_out);
    } else {
      ASSERT_FALSE(map_is_keyframe_out);
    }
  }

  // iterate backwards through keyframes only
  for (int i = kTestTableEntries_stss - 1; i >= 0; --i) {
    map_is_keyframe_out = false;
    ASSERT_TRUE(map_->GetIsKeyframe(kComputedKeyframes_stss[i],
                                    map_is_keyframe_out));
    ASSERT_TRUE(map_is_keyframe_out);
  }

  // iterate forwards but skip all keyframes
  for (int i = 0; i < kTestTableEntries_stsz; ++i) {
    if (known_keyframes.find(i) != known_keyframes.end()) {
      continue;
    }
    map_is_keyframe_out = true;
    ASSERT_TRUE(map_->GetIsKeyframe(i, map_is_keyframe_out));
    ASSERT_FALSE(map_is_keyframe_out);
  }
}

// ==== GetKeyframe() Tests ====================================================

// every frame should be returned as a keyframe. This tests if our computation
// of timestamps => sample numbers is equivalent to sample numbers => timestamps
TEST_F(ShellMP4MapTest, GetKeyframeNoKeyframeTableIteration) {
  SetDefaultBlockingReads_stts();
  EXPECT_CALL(*reader_, BlockingRead(_, _, _)).Times(AnyNumber());
  SetTestTable_stts(7);

  for (int i = 0; i < kTestTableEntries_stsz; ++i) {
    // get actual timestamp and duration of this sample
    uint64 sample_timestamp = GetTestSamplePTS(i);
    uint32 sample_duration = GetTestSampleDuration(i);
    // add a bit of time to sample timestamp, but keep time within this frame
    sample_timestamp += i % sample_duration;
    uint32 map_keyframe = 0;
    ASSERT_TRUE(map_->GetKeyframe(sample_timestamp, map_keyframe));
    ASSERT_EQ(map_keyframe, i);
  }
}

TEST_F(ShellMP4MapTest, GetKeyframeNoKeyframeTableRandomAccess) {
  SetDefaultBlockingReads_stts();
  EXPECT_CALL(*reader_, BlockingRead(_, _, _)).Times(AnyNumber());
  SetTestTable_stts(5);

  // backwards through the middle third of samples
  for (int i = (kTestTableEntries_stsz * 2) / 3;
       i >= kTestTableEntries_stsz / 3; --i) {
    uint64 sample_timestamp = GetTestSamplePTS(i);
    uint32 sample_duration = GetTestSampleDuration(i);
    sample_timestamp += sample_duration - 1 - (i % sample_duration);
    uint32 map_keyframe = 0;
    ASSERT_TRUE(map_->GetKeyframe(sample_timestamp, map_keyframe));
    ASSERT_EQ(map_keyframe, i);
  }

  // highest valid timestamp in file
  uint64 highest_timestamp = GetTestSamplePTS(kTestTableEntries_stsz - 1);
  highest_timestamp += GetTestSampleDuration(kTestTableEntries_stsz - 1) - 1;
  uint32 map_keyframe = 0;
  ASSERT_TRUE(map_->GetKeyframe(highest_timestamp, map_keyframe));
  ASSERT_EQ(map_keyframe, kTestTableEntries_stsz - 1);

  // lowest valid timestamp in file
  ASSERT_TRUE(map_->GetKeyframe(0, map_keyframe));
  ASSERT_EQ(map_keyframe, 0);

  // should fail on higher timestamps
  ASSERT_FALSE(map_->GetKeyframe(highest_timestamp + 1, map_keyframe));
}

// GetKeyframe is not normally called iteratively, so we test random access
TEST_F(ShellMP4MapTest, GetKeyframe) {
  SetDefaultBlockingReads_stss();
  SetDefaultBlockingReads_stts();
  EXPECT_CALL(*reader_, BlockingRead(_, _, _)).Times(AnyNumber());
  SetTestTable_stss(3);
  SetTestTable_stts(7);

  // find first keyframe in file, should be first frame
  uint32 map_keyframe = 0;
  ASSERT_TRUE(map_->GetKeyframe(0, map_keyframe));
  ASSERT_EQ(map_keyframe, 0);

  // find a first quarter keyframe in file
  uint32 qtr_keyframe = kComputedKeyframes_stss[kTestTableEntries_stss / 4];
  // midway between this keyframe and the next one
  uint32 next_keyframe =
      kComputedKeyframes_stss[(kTestTableEntries_stss / 4) + 1];
  uint32 test_frame = qtr_keyframe + ((next_keyframe - qtr_keyframe) / 2);
  // get time for this frame
  uint64 test_frame_timestamp = GetTestSamplePTS(test_frame);
  // get duration for this frame
  uint32 test_frame_duration = GetTestSampleDuration(test_frame);
  // midway through this frame
  test_frame_timestamp += test_frame_duration / 2;
  // find lower bound keyframe, should be qtr_keyframe
  ASSERT_TRUE(map_->GetKeyframe(test_frame_timestamp, map_keyframe));
  ASSERT_EQ(map_keyframe, qtr_keyframe);

  // timestamp one tick before qtr_keyframe should find previous keyframe
  test_frame_timestamp = GetTestSamplePTS(qtr_keyframe) - 1;
  ASSERT_TRUE(map_->GetKeyframe(test_frame_timestamp, map_keyframe));
  ASSERT_EQ(map_keyframe,
            kComputedKeyframes_stss[(kTestTableEntries_stss) / 4 - 1]);

  // very highest timestamp in file should return last keyframe
  uint64 highest_timestamp = GetTestSamplePTS(kTestTableEntries_stsz - 1);
  highest_timestamp += GetTestSampleDuration(kTestTableEntries_stsz - 1) - 1;
  ASSERT_TRUE(map_->GetKeyframe(highest_timestamp, map_keyframe));
  ASSERT_EQ(map_keyframe, kComputedKeyframes_stss[kTestTableEntries_stss - 1]);
}

}  // namespace media

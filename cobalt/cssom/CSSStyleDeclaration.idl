/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// The CSSStyleDeclaration interface represents a CSS declaration block,
// including its underlying state, where this underlying state depends upon the
// source of the CSSStyleDeclaration instance.
//   http://www.w3.org/TR/2013/WD-cssom-20131205/#the-cssstyledeclaration-interface
interface CSSStyleDeclaration {
  // TODO(b/24749043): Replace this list with __camel_cased_attribute.
  [TreatNullAs=EmptyString] attribute DOMString background;
  [TreatNullAs=EmptyString] attribute DOMString backgroundColor;
  [TreatNullAs=EmptyString] attribute DOMString backgroundImage;
  [TreatNullAs=EmptyString] attribute DOMString backgroundPosition;
  [TreatNullAs=EmptyString] attribute DOMString backgroundRepeat;
  [TreatNullAs=EmptyString] attribute DOMString backgroundSize;
  [TreatNullAs=EmptyString] attribute DOMString borderRadius;
  [TreatNullAs=EmptyString] attribute DOMString bottom;
  [TreatNullAs=EmptyString] attribute DOMString color;
  [TreatNullAs=EmptyString] attribute DOMString display;
  [TreatNullAs=EmptyString] attribute DOMString fontFamily;
  [TreatNullAs=EmptyString] attribute DOMString fontSize;
  [TreatNullAs=EmptyString] attribute DOMString fontStyle;
  [TreatNullAs=EmptyString] attribute DOMString fontWeight;
  [TreatNullAs=EmptyString] attribute DOMString height;
  [TreatNullAs=EmptyString] attribute DOMString left;
  [TreatNullAs=EmptyString] attribute DOMString lineHeight;
  [TreatNullAs=EmptyString] attribute DOMString opacity;
  [TreatNullAs=EmptyString] attribute DOMString overflow;
  [TreatNullAs=EmptyString] attribute DOMString overflowWrap;
  [TreatNullAs=EmptyString] attribute DOMString position;
  [TreatNullAs=EmptyString] attribute DOMString right;
  [TreatNullAs=EmptyString] attribute DOMString tabSize;
  [TreatNullAs=EmptyString] attribute DOMString textAlign;
  [TreatNullAs=EmptyString] attribute DOMString textIndent;
  [TreatNullAs=EmptyString] attribute DOMString textOverflow;
  [TreatNullAs=EmptyString] attribute DOMString textTransform;
  [TreatNullAs=EmptyString] attribute DOMString top;
  [TreatNullAs=EmptyString] attribute DOMString transform;
  [TreatNullAs=EmptyString] attribute DOMString transition;
  [TreatNullAs=EmptyString] attribute DOMString transitionDelay;
  [TreatNullAs=EmptyString] attribute DOMString transitionDuration;
  [TreatNullAs=EmptyString] attribute DOMString transitionProperty;
  [TreatNullAs=EmptyString] attribute DOMString transitionTimingFunction;
  [TreatNullAs=EmptyString] attribute DOMString verticalAlign;
  [TreatNullAs=EmptyString] attribute DOMString visibility;
  [TreatNullAs=EmptyString] attribute DOMString whiteSpace;
  [TreatNullAs=EmptyString] attribute DOMString width;
  [TreatNullAs=EmptyString] attribute DOMString wordWrap;
  [TreatNullAs=EmptyString] attribute DOMString zIndex;

  [TreatNullAs=EmptyString] attribute DOMString cssText;
  readonly attribute unsigned long length;
  getter DOMString? item(unsigned long index);
  DOMString getPropertyValue(DOMString property);
  void setPropertyValue(DOMString property, DOMString value);
  readonly attribute CSSRule? parentRule;
};

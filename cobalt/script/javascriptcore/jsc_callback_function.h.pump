$$ This is a pump file for generating file templates.  Pump is a python
$$ script that is part of the Google Test suite of utilities.  Description
$$ can be found here:
$$
$$ http://code.google.com/p/googletest/wiki/PumpManual
$$

$$ This should be no larger than MAX_ARITY in base/bind.h.pump.
$var MAX_ARITY = 7

/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef SCRIPT_JAVASCRIPTCORE_JSC_CALLBACK_FUNCTION_H_
#define SCRIPT_JAVASCRIPTCORE_JSC_CALLBACK_FUNCTION_H_

#include "base/logging.h"
#include "cobalt/script/callback_function.h"
#include "cobalt/script/javascriptcore/jsc_global_object.h"
#include "cobalt/script/javascriptcore/jsc_object_owner.h"
#include "third_party/WebKit/Source/JavaScriptCore/runtime/JSFunction.h"

// The JSCCallbackFunction type is used to represent IDL callback functions.
// Create a new JSCCallbackFunction by specifying the base CallbackFunction
// as a template parameter to the constructor.
//
// Constructor parameters:
//     callable: A handle that keeps keeps alive the JSC::JSFunction that
//         will be called when the callback is fired.
//     callback: A base::Callback that will be executed when the Run(...)
//         function is executed. It will take as parameters the object_owner
//         followed by any arguments that are defined on the callback type.

namespace cobalt {
namespace script {
namespace javascriptcore {

// First, we forward declare the Callback class template. This informs the
// compiler that the template only has 1 type parameter which is the base
// CallbackFunction template class with parameters.
//
// See base/callback.h.pump for further discussion on this pattern.
template <typename Sig>
class JSCCallbackFunction;

$range ARITY 0..MAX_ARITY
$for ARITY [[
$range ARG 1..ARITY


$if ARITY == 0 [[
template <typename R>
class JSCCallbackFunction<R(void)>
    : public CallbackFunction<R(void)> {
]] $else [[
template <typename R, $for ARG , [[typename A$(ARG)]]>
class JSCCallbackFunction<R($for ARG , [[A$(ARG)]])>
    : public CallbackFunction<R($for ARG , [[A$(ARG)]])> {
]]

 public:
  explicit JSCCallbackFunction(const scoped_refptr<JSCObjectOwner>& callable)
      : callable_(callable) {}

  R Run($for ARG , [[

      typename base::internal::CallbackParamTraits<A$(ARG)>::ForwardType a$(ARG)]])
      const OVERRIDE {
    DCHECK(callable_);
    DCHECK(callable_->js_object());
    JSC::JSFunction* js_function =
        JSC::jsCast<JSC::JSFunction*>(callable_->js_object().get());
    JSCGlobalObject* global_object =
        JSC::jsCast<JSCGlobalObject*>(js_function->globalObject());
    JSC::JSLockHolder lock(global_object->globalData());

    // http://www.w3.org/TR/WebIDL/#es-invoking-callback-functions
    // Callback 'this' is set to null, unless overridden by other specifications
    JSC::JSValue this_value = JSC::jsNull();
    JSC::MarkedArgumentBuffer args;
    $for ARG [[args.append(ToJSValue(global_object, a$(ARG)));
    ]]

    JSC::CallData call_data;
    JSC::CallType call_type =
        JSC::JSFunction::getCallData(js_function, call_data);
    JSC::ExecState* exec_state = global_object->globalExec();
    JSC::JSGlobalData& global_data = global_object->globalData();
    JSC::JSValue retval =
        JSC::call(exec_state, js_function, call_type, call_data, this_value, args);
    if (exec_state->hadException()) {
      JSC::JSValue exception = exec_state->exception();
      DCHECK(exception.isObject());
      JSC::JSObject* exception_object = exception.toObject(exec_state);
      DCHECK(exception_object->isErrorInstance());
      JSC::JSValue error_message = exception_object->getDirect(
          global_data, JSC::Identifier(&global_data, "message"));
      WTF::String exception_string = error_message.toWTFString(exec_state);
      DLOG(WARNING) << "Exception in callback:" +
                           std::string(exception_string.utf8().data());
      exec_state->clearException();
    }
  }

  JSCObjectOwner* callable() { return callable_.get(); }

 private:
  ~JSCCallbackFunction() {}

  scoped_refptr<JSCObjectOwner> callable_;
};

]]

}  // namespace javascriptcore
}  // namespace script
}  // namespace cobalt

#endif  // SCRIPT_JAVASCRIPTCORE_JSC_CALLBACK_FUNCTION_H_
